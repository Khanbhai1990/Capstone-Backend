'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (builder) {
  // Postgres is the only db engine that returns identifiers of all inserted rows. Therefore
  // we can insert batches only with postgres.
  var batchSize = (0, _knexUtils.isPostgres)(builder.knex()) ? POSTGRES_INSERT_BATCH_SIZE : 1;

  return function (tableInsertion) {
    var inputs = [];
    var others = [];
    var queries = [];

    var insertQuery = tableInsertion.modelClass.query().childQueryOf(builder);

    for (var i = 0, l = tableInsertion.models.length; i < l; ++i) {
      var model = tableInsertion.models[i];

      // We need to validate here since at this point the models should no longer contain any special properties.
      var json = model.$validate();

      // Set the return value back to model in case defaults were set.
      model.$set(json);

      if (tableInsertion.isInputModel[i]) {
        inputs.push(model);
      } else {
        others.push(model);
      }
    }

    batchInsert(inputs, insertQuery.clone().copyFrom(builder, /returning/), batchSize, queries);
    batchInsert(others, insertQuery.clone(), batchSize, queries);

    return _bluebird2.default.all(queries);
  };
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _knexUtils = require('../../utils/knexUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var POSTGRES_INSERT_BATCH_SIZE = 100;

/**
 * @param {QueryBuilder} builder
 * @return {function(TableInsertion)}
 */


function batchInsert(models, queryBuilder, batchSize, queries) {
  var batches = _lodash2.default.chunk(models, batchSize);

  for (var i = 0, l = batches.length; i < l; ++i) {
    queries.push(queryBuilder.clone().insert(batches[i]));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc2VydGVyLmpzIl0sIm5hbWVzIjpbImJ1aWxkZXIiLCJiYXRjaFNpemUiLCJrbmV4IiwiUE9TVEdSRVNfSU5TRVJUX0JBVENIX1NJWkUiLCJ0YWJsZUluc2VydGlvbiIsImlucHV0cyIsIm90aGVycyIsInF1ZXJpZXMiLCJpbnNlcnRRdWVyeSIsIm1vZGVsQ2xhc3MiLCJxdWVyeSIsImNoaWxkUXVlcnlPZiIsImkiLCJsIiwibW9kZWxzIiwibGVuZ3RoIiwibW9kZWwiLCJqc29uIiwiJHZhbGlkYXRlIiwiJHNldCIsImlzSW5wdXRNb2RlbCIsInB1c2giLCJiYXRjaEluc2VydCIsImNsb25lIiwiY29weUZyb20iLCJhbGwiLCJxdWVyeUJ1aWxkZXIiLCJiYXRjaGVzIiwiY2h1bmsiLCJpbnNlcnQiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFVZSxVQUFVQSxPQUFWLEVBQW1CO0FBQ2hDO0FBQ0E7QUFDQSxNQUFNQyxZQUFZLDJCQUFXRCxRQUFRRSxJQUFSLEVBQVgsSUFBNkJDLDBCQUE3QixHQUEwRCxDQUE1RTs7QUFFQSxTQUFPLFVBQUNDLGNBQUQsRUFBb0I7QUFDekIsUUFBTUMsU0FBUyxFQUFmO0FBQ0EsUUFBTUMsU0FBUyxFQUFmO0FBQ0EsUUFBTUMsVUFBVSxFQUFoQjs7QUFFQSxRQUFJQyxjQUFjSixlQUFlSyxVQUFmLENBQ2ZDLEtBRGUsR0FFZkMsWUFGZSxDQUVGWCxPQUZFLENBQWxCOztBQUlBLFNBQUssSUFBSVksSUFBSSxDQUFSLEVBQVdDLElBQUlULGVBQWVVLE1BQWYsQ0FBc0JDLE1BQTFDLEVBQWtESCxJQUFJQyxDQUF0RCxFQUF5RCxFQUFFRCxDQUEzRCxFQUE4RDtBQUM1RCxVQUFNSSxRQUFRWixlQUFlVSxNQUFmLENBQXNCRixDQUF0QixDQUFkOztBQUVBO0FBQ0EsVUFBTUssT0FBT0QsTUFBTUUsU0FBTixFQUFiOztBQUVBO0FBQ0FGLFlBQU1HLElBQU4sQ0FBV0YsSUFBWDs7QUFFQSxVQUFJYixlQUFlZ0IsWUFBZixDQUE0QlIsQ0FBNUIsQ0FBSixFQUFvQztBQUNsQ1AsZUFBT2dCLElBQVAsQ0FBWUwsS0FBWjtBQUNELE9BRkQsTUFFTztBQUNMVixlQUFPZSxJQUFQLENBQVlMLEtBQVo7QUFDRDtBQUNGOztBQUVETSxnQkFBWWpCLE1BQVosRUFBb0JHLFlBQVllLEtBQVosR0FBb0JDLFFBQXBCLENBQTZCeEIsT0FBN0IsRUFBc0MsV0FBdEMsQ0FBcEIsRUFBd0VDLFNBQXhFLEVBQW1GTSxPQUFuRjtBQUNBZSxnQkFBWWhCLE1BQVosRUFBb0JFLFlBQVllLEtBQVosRUFBcEIsRUFBeUN0QixTQUF6QyxFQUFvRE0sT0FBcEQ7O0FBRUEsV0FBTyxtQkFBUWtCLEdBQVIsQ0FBWWxCLE9BQVosQ0FBUDtBQUNELEdBN0JEO0FBOEJELEM7O0FBN0NEOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLElBQU1KLDZCQUE2QixHQUFuQzs7QUFFQTs7Ozs7O0FBeUNBLFNBQVNtQixXQUFULENBQXFCUixNQUFyQixFQUE2QlksWUFBN0IsRUFBMkN6QixTQUEzQyxFQUFzRE0sT0FBdEQsRUFBK0Q7QUFDN0QsTUFBTW9CLFVBQVUsaUJBQUVDLEtBQUYsQ0FBUWQsTUFBUixFQUFnQmIsU0FBaEIsQ0FBaEI7O0FBRUEsT0FBSyxJQUFJVyxJQUFJLENBQVIsRUFBV0MsSUFBSWMsUUFBUVosTUFBNUIsRUFBb0NILElBQUlDLENBQXhDLEVBQTJDLEVBQUVELENBQTdDLEVBQWdEO0FBQzlDTCxZQUFRYyxJQUFSLENBQWFLLGFBQWFILEtBQWIsR0FBcUJNLE1BQXJCLENBQTRCRixRQUFRZixDQUFSLENBQTVCLENBQWI7QUFDRDtBQUNGIiwiZmlsZSI6Imluc2VydGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7aXNQb3N0Z3Jlc30gZnJvbSAnLi4vLi4vdXRpbHMva25leFV0aWxzJztcblxuY29uc3QgUE9TVEdSRVNfSU5TRVJUX0JBVENIX1NJWkUgPSAxMDA7XG5cbi8qKlxuICogQHBhcmFtIHtRdWVyeUJ1aWxkZXJ9IGJ1aWxkZXJcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKFRhYmxlSW5zZXJ0aW9uKX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGJ1aWxkZXIpIHtcbiAgLy8gUG9zdGdyZXMgaXMgdGhlIG9ubHkgZGIgZW5naW5lIHRoYXQgcmV0dXJucyBpZGVudGlmaWVycyBvZiBhbGwgaW5zZXJ0ZWQgcm93cy4gVGhlcmVmb3JlXG4gIC8vIHdlIGNhbiBpbnNlcnQgYmF0Y2hlcyBvbmx5IHdpdGggcG9zdGdyZXMuXG4gIGNvbnN0IGJhdGNoU2l6ZSA9IGlzUG9zdGdyZXMoYnVpbGRlci5rbmV4KCkpID8gUE9TVEdSRVNfSU5TRVJUX0JBVENIX1NJWkUgOiAxO1xuXG4gIHJldHVybiAodGFibGVJbnNlcnRpb24pID0+IHtcbiAgICBjb25zdCBpbnB1dHMgPSBbXTtcbiAgICBjb25zdCBvdGhlcnMgPSBbXTtcbiAgICBjb25zdCBxdWVyaWVzID0gW107XG5cbiAgICBsZXQgaW5zZXJ0UXVlcnkgPSB0YWJsZUluc2VydGlvbi5tb2RlbENsYXNzXG4gICAgICAucXVlcnkoKVxuICAgICAgLmNoaWxkUXVlcnlPZihidWlsZGVyKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGFibGVJbnNlcnRpb24ubW9kZWxzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgbW9kZWwgPSB0YWJsZUluc2VydGlvbi5tb2RlbHNbaV07XG5cbiAgICAgIC8vIFdlIG5lZWQgdG8gdmFsaWRhdGUgaGVyZSBzaW5jZSBhdCB0aGlzIHBvaW50IHRoZSBtb2RlbHMgc2hvdWxkIG5vIGxvbmdlciBjb250YWluIGFueSBzcGVjaWFsIHByb3BlcnRpZXMuXG4gICAgICBjb25zdCBqc29uID0gbW9kZWwuJHZhbGlkYXRlKCk7XG5cbiAgICAgIC8vIFNldCB0aGUgcmV0dXJuIHZhbHVlIGJhY2sgdG8gbW9kZWwgaW4gY2FzZSBkZWZhdWx0cyB3ZXJlIHNldC5cbiAgICAgIG1vZGVsLiRzZXQoanNvbik7XG5cbiAgICAgIGlmICh0YWJsZUluc2VydGlvbi5pc0lucHV0TW9kZWxbaV0pIHtcbiAgICAgICAgaW5wdXRzLnB1c2gobW9kZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3RoZXJzLnB1c2gobW9kZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJhdGNoSW5zZXJ0KGlucHV0cywgaW5zZXJ0UXVlcnkuY2xvbmUoKS5jb3B5RnJvbShidWlsZGVyLCAvcmV0dXJuaW5nLyksIGJhdGNoU2l6ZSwgcXVlcmllcyk7XG4gICAgYmF0Y2hJbnNlcnQob3RoZXJzLCBpbnNlcnRRdWVyeS5jbG9uZSgpLCBiYXRjaFNpemUsIHF1ZXJpZXMpO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHF1ZXJpZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiYXRjaEluc2VydChtb2RlbHMsIHF1ZXJ5QnVpbGRlciwgYmF0Y2hTaXplLCBxdWVyaWVzKSB7XG4gIGNvbnN0IGJhdGNoZXMgPSBfLmNodW5rKG1vZGVscywgYmF0Y2hTaXplKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGJhdGNoZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgcXVlcmllcy5wdXNoKHF1ZXJ5QnVpbGRlci5jbG9uZSgpLmluc2VydChiYXRjaGVzW2ldKSk7XG4gIH1cbn1cblxuIl19