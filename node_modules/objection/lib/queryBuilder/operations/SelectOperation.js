'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _WrappingQueryBuilderOperation = require('./WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SelectOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(SelectOperation, _WrappingQueryBuilder);

  function SelectOperation(name, opt) {
    (0, _classCallCheck3.default)(this, SelectOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.call(this, name, opt));

    _this.selections = [];
    return _this;
  }

  SelectOperation.parseSelection = function parseSelection(selection) {
    if (!_lodash2.default.isString(selection)) {
      return null;
    }

    // Discard the possible alias.
    selection = selection.split(/\s+as\s+/i)[0].trim();
    var dotIdx = selection.lastIndexOf('.');

    if (dotIdx !== -1) {
      return {
        table: selection.substr(0, dotIdx),
        column: selection.substr(dotIdx + 1)
      };
    } else {
      return {
        table: null,
        column: selection
      };
    }
  };

  SelectOperation.prototype.call = function call(builder, args) {
    var selections = _lodash2.default.flatten(args);

    // Don't add an empty selection.
    if (selections.length === 0) {
      return false;
    }

    var ret = _WrappingQueryBuilder.prototype.call.call(this, builder, selections);

    for (var i = 0, l = selections.length; i < l; ++i) {
      var selection = SelectOperation.parseSelection(selections[i]);

      if (selection) {
        this.selections.push(selection);
      }
    }

    return ret;
  };

  SelectOperation.prototype.onBuild = function onBuild(builder) {
    builder[this.name].apply(builder, this.args);
  };

  SelectOperation.prototype.hasSelection = function hasSelection(fromTable, selection) {
    var testSelect = SelectOperation.parseSelection(selection);

    if (!testSelect) {
      return false;
    }

    var testTable = testSelect.table || fromTable;
    var testColumn = testSelect.column;

    for (var i = 0, l = this.selections.length; i < l; ++i) {
      var table = this.selections[i].table || fromTable;
      var column = this.selections[i].column;

      if (testTable === table && (column === testColumn || column === '*')) {
        return true;
      }
    }

    return false;
  };

  return SelectOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = SelectOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlbGVjdE9wZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJTZWxlY3RPcGVyYXRpb24iLCJuYW1lIiwib3B0Iiwic2VsZWN0aW9ucyIsInBhcnNlU2VsZWN0aW9uIiwic2VsZWN0aW9uIiwiaXNTdHJpbmciLCJzcGxpdCIsInRyaW0iLCJkb3RJZHgiLCJsYXN0SW5kZXhPZiIsInRhYmxlIiwic3Vic3RyIiwiY29sdW1uIiwiY2FsbCIsImJ1aWxkZXIiLCJhcmdzIiwiZmxhdHRlbiIsImxlbmd0aCIsInJldCIsImkiLCJsIiwicHVzaCIsIm9uQnVpbGQiLCJhcHBseSIsImhhc1NlbGVjdGlvbiIsImZyb21UYWJsZSIsInRlc3RTZWxlY3QiLCJ0ZXN0VGFibGUiLCJ0ZXN0Q29sdW1uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxlOzs7QUFFbkIsMkJBQVlDLElBQVosRUFBa0JDLEdBQWxCLEVBQXVCO0FBQUE7O0FBQUEsK0RBQ3JCLGlDQUFNRCxJQUFOLEVBQVlDLEdBQVosQ0FEcUI7O0FBRXJCLFVBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFGcUI7QUFHdEI7O2tCQUVNQyxjLDJCQUFlQyxTLEVBQVc7QUFDL0IsUUFBSSxDQUFDLGlCQUFFQyxRQUFGLENBQVdELFNBQVgsQ0FBTCxFQUE0QjtBQUMxQixhQUFPLElBQVA7QUFDRDs7QUFFRDtBQUNBQSxnQkFBWUEsVUFBVUUsS0FBVixDQUFnQixXQUFoQixFQUE2QixDQUE3QixFQUFnQ0MsSUFBaEMsRUFBWjtBQUNBLFFBQU1DLFNBQVNKLFVBQVVLLFdBQVYsQ0FBc0IsR0FBdEIsQ0FBZjs7QUFFQSxRQUFJRCxXQUFXLENBQUMsQ0FBaEIsRUFBbUI7QUFDakIsYUFBTztBQUNMRSxlQUFPTixVQUFVTyxNQUFWLENBQWlCLENBQWpCLEVBQW9CSCxNQUFwQixDQURGO0FBRUxJLGdCQUFRUixVQUFVTyxNQUFWLENBQWlCSCxTQUFTLENBQTFCO0FBRkgsT0FBUDtBQUlELEtBTEQsTUFLTztBQUNMLGFBQU87QUFDTEUsZUFBTyxJQURGO0FBRUxFLGdCQUFRUjtBQUZILE9BQVA7QUFJRDtBQUNGLEc7OzRCQUVEUyxJLGlCQUFLQyxPLEVBQVNDLEksRUFBTTtBQUNsQixRQUFNYixhQUFhLGlCQUFFYyxPQUFGLENBQVVELElBQVYsQ0FBbkI7O0FBRUE7QUFDQSxRQUFJYixXQUFXZSxNQUFYLEtBQXNCLENBQTFCLEVBQTZCO0FBQzNCLGFBQU8sS0FBUDtBQUNEOztBQUVELFFBQU1DLE1BQU0sZ0NBQU1MLElBQU4sWUFBV0MsT0FBWCxFQUFvQlosVUFBcEIsQ0FBWjs7QUFFQSxTQUFLLElBQUlpQixJQUFJLENBQVIsRUFBV0MsSUFBSWxCLFdBQVdlLE1BQS9CLEVBQXVDRSxJQUFJQyxDQUEzQyxFQUE4QyxFQUFFRCxDQUFoRCxFQUFtRDtBQUNqRCxVQUFNZixZQUFZTCxnQkFBZ0JJLGNBQWhCLENBQStCRCxXQUFXaUIsQ0FBWCxDQUEvQixDQUFsQjs7QUFFQSxVQUFJZixTQUFKLEVBQWU7QUFDYixhQUFLRixVQUFMLENBQWdCbUIsSUFBaEIsQ0FBcUJqQixTQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBT2MsR0FBUDtBQUNELEc7OzRCQUVESSxPLG9CQUFRUixPLEVBQVM7QUFDZkEsWUFBUSxLQUFLZCxJQUFiLEVBQW1CdUIsS0FBbkIsQ0FBeUJULE9BQXpCLEVBQWtDLEtBQUtDLElBQXZDO0FBQ0QsRzs7NEJBRURTLFkseUJBQWFDLFMsRUFBV3JCLFMsRUFBVztBQUNqQyxRQUFNc0IsYUFBYTNCLGdCQUFnQkksY0FBaEIsQ0FBK0JDLFNBQS9CLENBQW5COztBQUVBLFFBQUksQ0FBQ3NCLFVBQUwsRUFBaUI7QUFDZixhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFNQyxZQUFZRCxXQUFXaEIsS0FBWCxJQUFvQmUsU0FBdEM7QUFDQSxRQUFNRyxhQUFhRixXQUFXZCxNQUE5Qjs7QUFFQSxTQUFLLElBQUlPLElBQUksQ0FBUixFQUFXQyxJQUFJLEtBQUtsQixVQUFMLENBQWdCZSxNQUFwQyxFQUE0Q0UsSUFBSUMsQ0FBaEQsRUFBbUQsRUFBRUQsQ0FBckQsRUFBd0Q7QUFDdEQsVUFBTVQsUUFBUSxLQUFLUixVQUFMLENBQWdCaUIsQ0FBaEIsRUFBbUJULEtBQW5CLElBQTRCZSxTQUExQztBQUNBLFVBQU1iLFNBQVMsS0FBS1YsVUFBTCxDQUFnQmlCLENBQWhCLEVBQW1CUCxNQUFsQzs7QUFFQSxVQUFJZSxjQUFjakIsS0FBZCxLQUF3QkUsV0FBV2dCLFVBQVgsSUFBeUJoQixXQUFXLEdBQTVELENBQUosRUFBc0U7QUFDcEUsZUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPLEtBQVA7QUFDRCxHOzs7OztrQkExRWtCYixlIiwiZmlsZSI6IlNlbGVjdE9wZXJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgV3JhcHBpbmdRdWVyeUJ1aWxkZXJPcGVyYXRpb24gZnJvbSAnLi9XcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdE9wZXJhdGlvbiBleHRlbmRzIFdyYXBwaW5nUXVlcnlCdWlsZGVyT3BlcmF0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihuYW1lLCBvcHQpIHtcbiAgICBzdXBlcihuYW1lLCBvcHQpO1xuICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlU2VsZWN0aW9uKHNlbGVjdGlvbikge1xuICAgIGlmICghXy5pc1N0cmluZyhzZWxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBEaXNjYXJkIHRoZSBwb3NzaWJsZSBhbGlhcy5cbiAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uc3BsaXQoL1xccythc1xccysvaSlbMF0udHJpbSgpO1xuICAgIGNvbnN0IGRvdElkeCA9IHNlbGVjdGlvbi5sYXN0SW5kZXhPZignLicpO1xuXG4gICAgaWYgKGRvdElkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhYmxlOiBzZWxlY3Rpb24uc3Vic3RyKDAsIGRvdElkeCksXG4gICAgICAgIGNvbHVtbjogc2VsZWN0aW9uLnN1YnN0cihkb3RJZHggKyAxKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFibGU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogc2VsZWN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNhbGwoYnVpbGRlciwgYXJncykge1xuICAgIGNvbnN0IHNlbGVjdGlvbnMgPSBfLmZsYXR0ZW4oYXJncyk7XG5cbiAgICAvLyBEb24ndCBhZGQgYW4gZW1wdHkgc2VsZWN0aW9uLlxuICAgIGlmIChzZWxlY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJldCA9IHN1cGVyLmNhbGwoYnVpbGRlciwgc2VsZWN0aW9ucyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNlbGVjdGlvbnMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBTZWxlY3RPcGVyYXRpb24ucGFyc2VTZWxlY3Rpb24oc2VsZWN0aW9uc1tpXSk7XG5cbiAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zLnB1c2goc2VsZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgb25CdWlsZChidWlsZGVyKSB7XG4gICAgYnVpbGRlclt0aGlzLm5hbWVdLmFwcGx5KGJ1aWxkZXIsIHRoaXMuYXJncyk7XG4gIH1cblxuICBoYXNTZWxlY3Rpb24oZnJvbVRhYmxlLCBzZWxlY3Rpb24pIHtcbiAgICBjb25zdCB0ZXN0U2VsZWN0ID0gU2VsZWN0T3BlcmF0aW9uLnBhcnNlU2VsZWN0aW9uKHNlbGVjdGlvbik7XG5cbiAgICBpZiAoIXRlc3RTZWxlY3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXN0VGFibGUgPSB0ZXN0U2VsZWN0LnRhYmxlIHx8IGZyb21UYWJsZTtcbiAgICBjb25zdCB0ZXN0Q29sdW1uID0gdGVzdFNlbGVjdC5jb2x1bW47XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc2VsZWN0aW9ucy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5zZWxlY3Rpb25zW2ldLnRhYmxlIHx8IGZyb21UYWJsZTtcbiAgICAgIGNvbnN0IGNvbHVtbiA9IHRoaXMuc2VsZWN0aW9uc1tpXS5jb2x1bW47XG5cbiAgICAgIGlmICh0ZXN0VGFibGUgPT09IHRhYmxlICYmIChjb2x1bW4gPT09IHRlc3RDb2x1bW4gfHwgY29sdW1uID09PSAnKicpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSJdfQ==