'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _Model = require('../../model/Model');

var _Model2 = _interopRequireDefault(_Model);

var _QueryBuilderOperation = require('./QueryBuilderOperation');

var _QueryBuilderOperation2 = _interopRequireDefault(_QueryBuilderOperation);

var _promiseUtils = require('../../utils/promiseUtils');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FindOperation = function (_QueryBuilderOperatio) {
  (0, _inherits3.default)(FindOperation, _QueryBuilderOperatio);

  function FindOperation() {
    (0, _classCallCheck3.default)(this, FindOperation);
    return (0, _possibleConstructorReturn3.default)(this, _QueryBuilderOperatio.apply(this, arguments));
  }

  FindOperation.prototype.clone = function clone(props) {
    props = props || {};
    var opt = (0, _assign2.default)({}, this.opt, props.opt);
    return new this.constructor(this.name, opt);
  };

  FindOperation.prototype.onAfter = function onAfter(builder, results) {
    if (this.opt.dontCallAfterGet) {
      return results;
    } else {
      return callAfterGet(builder.context(), results, !!this.opt.callAfterGetDeeply);
    }
  };

  return FindOperation;
}(_QueryBuilderOperation2.default);

exports.default = FindOperation;


function callAfterGet(ctx, results, deep) {
  if (Array.isArray(results)) {
    if (results.length === 1) {
      return callAfterGetForOne(ctx, results[0], results, deep);
    } else {
      return callAfterGetArray(ctx, results, deep);
    }
  } else {
    return callAfterGetForOne(ctx, results, results, deep);
  }
}

function callAfterGetArray(ctx, results, deep) {
  if (results.length === 0 || (0, _typeof3.default)(results[0]) !== 'object') {
    return results;
  }

  var mapped = new Array(results.length);
  var containsPromise = false;

  for (var i = 0, l = results.length; i < l; ++i) {
    mapped[i] = callAfterGetForOne(ctx, results[i], results[i], deep);

    if ((0, _promiseUtils.isPromise)(mapped[i])) {
      containsPromise = true;
    }
  }

  if (containsPromise) {
    return _bluebird2.default.all(mapped);
  } else {
    return mapped;
  }
}

function callAfterGetForOne(ctx, model, result, deep) {
  if (!(model instanceof _Model2.default)) {
    return result;
  }

  if (deep) {
    var results = [];
    var containsPromise = callAfterGetForRelations(ctx, model, results);

    if (containsPromise) {
      return _bluebird2.default.all(results).then(function () {
        return doCallAfterGet(ctx, model, result);
      });
    } else {
      return doCallAfterGet(ctx, model, result);
    }
  } else {
    return doCallAfterGet(ctx, model, result);
  }
}

function callAfterGetForRelations(ctx, model, results) {
  var relations = model.constructor.getRelationArray();
  var containsPromise = false;

  for (var i = 0, l = relations.length; i < l; ++i) {
    var relName = relations[i].name;

    if (model[relName]) {
      var maybePromise = callAfterGet(ctx, model[relName], true);

      if ((0, _promiseUtils.isPromise)(maybePromise)) {
        containsPromise = true;
      }

      results.push(maybePromise);
    }
  }

  return containsPromise;
}

function doCallAfterGet(ctx, model, result) {
  if (model.$afterGet !== _Model2.default.prototype.$afterGet) {
    var maybePromise = model.$afterGet(ctx);

    if (maybePromise instanceof _bluebird2.default) {
      return maybePromise.return(result);
    } else if ((0, _promiseUtils.isPromise)(maybePromise)) {
      return maybePromise.then(function () {
        return result;
      });
    } else {
      return result;
    }
  } else {
    return result;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbmRPcGVyYXRpb24uanMiXSwibmFtZXMiOlsiRmluZE9wZXJhdGlvbiIsImNsb25lIiwicHJvcHMiLCJvcHQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvbkFmdGVyIiwiYnVpbGRlciIsInJlc3VsdHMiLCJkb250Q2FsbEFmdGVyR2V0IiwiY2FsbEFmdGVyR2V0IiwiY29udGV4dCIsImNhbGxBZnRlckdldERlZXBseSIsImN0eCIsImRlZXAiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJjYWxsQWZ0ZXJHZXRGb3JPbmUiLCJjYWxsQWZ0ZXJHZXRBcnJheSIsIm1hcHBlZCIsImNvbnRhaW5zUHJvbWlzZSIsImkiLCJsIiwiYWxsIiwibW9kZWwiLCJyZXN1bHQiLCJjYWxsQWZ0ZXJHZXRGb3JSZWxhdGlvbnMiLCJ0aGVuIiwiZG9DYWxsQWZ0ZXJHZXQiLCJyZWxhdGlvbnMiLCJnZXRSZWxhdGlvbkFycmF5IiwicmVsTmFtZSIsIm1heWJlUHJvbWlzZSIsInB1c2giLCIkYWZ0ZXJHZXQiLCJwcm90b3R5cGUiLCJyZXR1cm4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7SUFFcUJBLGE7Ozs7Ozs7OzBCQUVuQkMsSyxrQkFBTUMsSyxFQUFPO0FBQ1hBLFlBQVFBLFNBQVMsRUFBakI7QUFDQSxRQUFNQyxNQUFNLHNCQUFjLEVBQWQsRUFBa0IsS0FBS0EsR0FBdkIsRUFBNEJELE1BQU1DLEdBQWxDLENBQVo7QUFDQSxXQUFPLElBQUksS0FBS0MsV0FBVCxDQUFxQixLQUFLQyxJQUExQixFQUFnQ0YsR0FBaEMsQ0FBUDtBQUNELEc7OzBCQUVERyxPLG9CQUFRQyxPLEVBQVNDLE8sRUFBUztBQUN4QixRQUFJLEtBQUtMLEdBQUwsQ0FBU00sZ0JBQWIsRUFBK0I7QUFDN0IsYUFBT0QsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU9FLGFBQWFILFFBQVFJ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OztBQUVBLE9BQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLElBQUlPLFVBQVViLE1BQTlCLEVBQXNDSyxJQUFJQyxDQUExQyxFQUE2QyxFQUFFRCxDQUEvQyxFQUFrRDtBQUNoRCxRQUFNVSxVQUFVRixVQUFVUixDQUFWLEVBQWFqQixJQUE3Qjs7QUFFQSxRQUFJb0IsTUFBTU8sT0FBTixDQUFKLEVBQW9CO0FBQ2xCLFVBQU1DLGVBQWV2QixhQUFhRyxHQUFiLEVBQWtCWSxNQUFNTyxPQUFOLENBQWxCLEVBQWtDLElBQWxDLENBQXJCOztBQUVBLFVBQUksNkJBQVVDLFlBQVYsQ0FBSixFQUE2QjtBQUMzQlosMEJBQWtCLElBQWxCO0FBQ0Q7O0FBRURiLGNBQVEwQixJQUFSLENBQWFELFlBQWI7QUFDRDtBQUNGOztBQUVELFNBQU9aLGVBQVA7QUFDRDs7QUFFRCxTQUFTUSxjQUFULENBQXdCaEIsR0FBeEIsRUFBNkJZLEtBQTdCLEVBQW9DQyxNQUFwQyxFQUE0QztBQUMxQyxNQUFJRCxNQUFNVSxTQUFOLEtBQW9CLGdCQUFNQyxTQUFOLENBQWdCRCxTQUF4QyxFQUFtRDtBQUNqRCxRQUFNRixlQUFlUixNQUFNVSxTQUFOLENBQWdCdEIsR0FBaEIsQ0FBckI7O0FBRUEsUUFBSW9CLDBDQUFKLEVBQXFDO0FBQ25DLGFBQU9BLGFBQWFJLE1BQWIsQ0FBb0JYLE1BQXBCLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSw2QkFBVU8sWUFBVixDQUFKLEVBQTZCO0FBQ2xDLGFBQU9BLGFBQWFMLElBQWIsQ0FBa0I7QUFBQSxlQUFNRixNQUFOO0FBQUEsT0FBbEIsQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMLGFBQU9BLE1BQVA7QUFDRDtBQUNGLEdBVkQsTUFVTztBQUNMLFdBQU9BLE1BQVA7QUFDRDtBQUNGIiwiZmlsZSI6IkZpbmRPcGVyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xvbmUgZnJvbSAnbG9kYXNoL2Nsb25lJztcbmltcG9ydCBNb2RlbCBmcm9tICcuLi8uLi9tb2RlbC9Nb2RlbCc7XG5pbXBvcnQgUXVlcnlCdWlsZGVyT3BlcmF0aW9uIGZyb20gJy4vUXVlcnlCdWlsZGVyT3BlcmF0aW9uJztcbmltcG9ydCB7aXNQcm9taXNlfSBmcm9tICcuLi8uLi91dGlscy9wcm9taXNlVXRpbHMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaW5kT3BlcmF0aW9uIGV4dGVuZHMgUXVlcnlCdWlsZGVyT3BlcmF0aW9uIHtcblxuICBjbG9uZShwcm9wcykge1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgY29uc3Qgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHQsIHByb3BzLm9wdCk7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubmFtZSwgb3B0KTtcbiAgfVxuXG4gIG9uQWZ0ZXIoYnVpbGRlciwgcmVzdWx0cykge1xuICAgIGlmICh0aGlzLm9wdC5kb250Q2FsbEFmdGVyR2V0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNhbGxBZnRlckdldChidWlsZGVyLmNvbnRleHQoKSwgcmVzdWx0cywgISF0aGlzLm9wdC5jYWxsQWZ0ZXJHZXREZWVwbHkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsQWZ0ZXJHZXQoY3R4LCByZXN1bHRzLCBkZWVwKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gY2FsbEFmdGVyR2V0Rm9yT25lKGN0eCwgcmVzdWx0c1swXSwgcmVzdWx0cywgZGVlcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYWxsQWZ0ZXJHZXRBcnJheShjdHgsIHJlc3VsdHMsIGRlZXApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FsbEFmdGVyR2V0Rm9yT25lKGN0eCwgcmVzdWx0cywgcmVzdWx0cywgZGVlcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEFmdGVyR2V0QXJyYXkoY3R4LCByZXN1bHRzLCBkZWVwKSB7XG4gIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgcmVzdWx0c1swXSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIGNvbnN0IG1hcHBlZCA9IG5ldyBBcnJheShyZXN1bHRzLmxlbmd0aCk7XG4gIGxldCBjb250YWluc1Byb21pc2UgPSBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgbWFwcGVkW2ldID0gY2FsbEFmdGVyR2V0Rm9yT25lKGN0eCwgcmVzdWx0c1tpXSwgcmVzdWx0c1tpXSwgZGVlcCk7XG5cbiAgICBpZiAoaXNQcm9taXNlKG1hcHBlZFtpXSkpIHtcbiAgICAgIGNvbnRhaW5zUHJvbWlzZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRhaW5zUHJvbWlzZSkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChtYXBwZWQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtYXBwZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEFmdGVyR2V0Rm9yT25lKGN0eCwgbW9kZWwsIHJlc3VsdCwgZGVlcCkge1xuICBpZiAoIShtb2RlbCBpbnN0YW5jZW9mIE1vZGVsKSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoZGVlcCkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBjb25zdCBjb250YWluc1Byb21pc2UgPSBjYWxsQWZ0ZXJHZXRGb3JSZWxhdGlvbnMoY3R4LCBtb2RlbCwgcmVzdWx0cyk7XG5cbiAgICBpZiAoY29udGFpbnNQcm9taXNlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBkb0NhbGxBZnRlckdldChjdHgsIG1vZGVsLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkb0NhbGxBZnRlckdldChjdHgsIG1vZGVsLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9DYWxsQWZ0ZXJHZXQoY3R4LCBtb2RlbCwgcmVzdWx0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsQWZ0ZXJHZXRGb3JSZWxhdGlvbnMoY3R4LCBtb2RlbCwgcmVzdWx0cykge1xuICBjb25zdCByZWxhdGlvbnMgPSBtb2RlbC5jb25zdHJ1Y3Rvci5nZXRSZWxhdGlvbkFycmF5KCk7XG4gIGxldCBjb250YWluc1Byb21pc2UgPSBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHJlbGF0aW9ucy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCByZWxOYW1lID0gcmVsYXRpb25zW2ldLm5hbWU7XG5cbiAgICBpZiAobW9kZWxbcmVsTmFtZV0pIHtcbiAgICAgIGNvbnN0IG1heWJlUHJvbWlzZSA9IGNhbGxBZnRlckdldChjdHgsIG1vZGVsW3JlbE5hbWVdLCB0cnVlKTtcblxuICAgICAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgICAgIGNvbnRhaW5zUHJvbWlzZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdHMucHVzaChtYXliZVByb21pc2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb250YWluc1Byb21pc2U7XG59XG5cbmZ1bmN0aW9uIGRvQ2FsbEFmdGVyR2V0KGN0eCwgbW9kZWwsIHJlc3VsdCkge1xuICBpZiAobW9kZWwuJGFmdGVyR2V0ICE9PSBNb2RlbC5wcm90b3R5cGUuJGFmdGVyR2V0KSB7XG4gICAgY29uc3QgbWF5YmVQcm9taXNlID0gbW9kZWwuJGFmdGVyR2V0KGN0eCk7XG5cbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZS5yZXR1cm4ocmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgICByZXR1cm4gbWF5YmVQcm9taXNlLnRoZW4oKCkgPT4gcmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl19