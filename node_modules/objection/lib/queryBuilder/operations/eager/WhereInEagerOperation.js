'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _chunk = require('lodash/chunk');

var _chunk2 = _interopRequireDefault(_chunk);

var _flatten = require('lodash/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ValidationError = require('../../../model/ValidationError');

var _ValidationError2 = _interopRequireDefault(_ValidationError);

var _EagerOperation2 = require('./EagerOperation');

var _EagerOperation3 = _interopRequireDefault(_EagerOperation2);

var _knexUtils = require('../../../utils/knexUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereInEagerOperation = function (_EagerOperation) {
  (0, _inherits3.default)(WhereInEagerOperation, _EagerOperation);

  function WhereInEagerOperation(name, opt) {
    (0, _classCallCheck3.default)(this, WhereInEagerOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _EagerOperation.call(this, name, opt));

    _this.relationsToFetch = [];
    _this.omitProps = [];
    return _this;
  }

  WhereInEagerOperation.prototype.batchSize = function batchSize(knex) {
    if ((0, _knexUtils.isMsSql)(knex)) {
      // On MSSQL the parameter limit is actually 2100, but since I couldn't figure out
      // if the limit is for all parameters in a query or for individual clauses, we set
      // the limit to 2000 to leave 100 parameters for where clauses etc.
      return 2000;
    } else {
      // I'm sure there is some kind of limit for other databases too, but let's lower
      // this if someone ever hits those limits.
      return 10000;
    }
  };

  WhereInEagerOperation.prototype.clone = function clone(props) {
    var copy = _EagerOperation.prototype.clone.call(this);

    copy.relationsToFetch = this.relationsToFetch.slice();
    copy.omitProps = this.omitProps.slice();

    return copy;
  };

  WhereInEagerOperation.prototype.call = function call(builder, args) {
    var ret = _EagerOperation.prototype.call.call(this, builder, args);

    var modelClass = builder.modelClass();
    var relations = modelClass.getRelationArray();

    for (var i = 0, l = relations.length; i < l; ++i) {
      var relation = relations[i];
      var childExpression = this.expression.childExpression(relation.name);

      if (childExpression) {
        this.relationsToFetch.push({
          relation: relation,
          childExpression: childExpression
        });
      }
    }

    return ret;
  };

  WhereInEagerOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var addedSelects = {};

    for (var i = 0, l = this.relationsToFetch.length; i < l; ++i) {
      var relation = this.relationsToFetch[i].relation;
      var _cols = relation.fullOwnerCol();

      for (var c = 0, lc = _cols.length; c < lc; ++c) {
        var col = _cols[c];

        if (!builder.hasSelection(col) && !addedSelects[col]) {
          this.omitProps.push(relation.ownerProp[c]);
          addedSelects[col] = true;
        }
      }
    }

    var cols = (0, _keys2.default)(addedSelects);

    if (cols.length) {
      builder.select(cols);
    }
  };

  WhereInEagerOperation.prototype.onAfterInternal = function onAfterInternal(builder, result) {
    var _this2 = this;

    var modelClass = builder.modelClass();

    if (!result) {
      return result;
    }

    var models = Array.isArray(result) ? result : [result];

    if (!models.length || !(models[0] instanceof modelClass)) {
      return result;
    }

    var promises = [];

    this.expression.forEachChild(function (child) {
      var relation = modelClass.getRelations()[child.name];

      if (!relation) {
        throw new _ValidationError2.default({ eager: 'unknown relation "' + child.name + '" in an eager expression' });
      }
    });

    for (var i = 0, l = this.relationsToFetch.length; i < l; ++i) {
      var relation = this.relationsToFetch[i].relation;
      var childExpression = this.relationsToFetch[i].childExpression;

      promises.push(this.fetchRelation(builder, models, relation, childExpression));
    }

    return _bluebird2.default.all(promises).then(function () {
      if (!_this2.omitProps.length) {
        return result;
      }

      for (var _i = 0, _l = result.length; _i < _l; ++_i) {
        var model = result[_i];

        for (var c = 0, lc = _this2.omitProps.length; c < lc; ++c) {
          modelClass.omitImpl(model, _this2.omitProps[c]);
        }
      }

      return result;
    });
  };

  WhereInEagerOperation.prototype.fetchRelation = function fetchRelation(builder, models, relation, childExpression) {
    var _this3 = this;

    var batchSize = this.batchSize(builder.knex());
    var modelBatches = (0, _chunk2.default)(models, batchSize);

    return _bluebird2.default.map(modelBatches, function (batch) {
      return _this3.fetchRelationBatch(builder, batch, relation, childExpression);
    }).then(_flatten2.default);
  };

  WhereInEagerOperation.prototype.fetchRelationBatch = function fetchRelationBatch(builder, models, relation, childExpression) {
    var queryBuilder = relation.ownerModelClass.RelatedQueryBuilder.forClass(relation.relatedModelClass).childQueryOf(builder).eager(childExpression);

    var findOperation = relation.find(queryBuilder, models);
    findOperation.alwaysReturnArray = true;

    queryBuilder.callQueryBuilderOperation(findOperation, []);

    for (var i = 0, l = childExpression.args.length; i < l; ++i) {
      var filterName = childExpression.args[i];
      var filter = childExpression.filters[filterName];

      if (typeof filter !== 'function') {
        throw new _ValidationError2.default({ eager: 'could not find filter "' + filterName + '" for relation "' + relation.name + '"' });
      }

      filter(queryBuilder);
    }

    return queryBuilder;
  };

  return WhereInEagerOperation;
}(_EagerOperation3.default);

exports.default = WhereInEagerOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,