'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _DelegateOperation2 = require('./DelegateOperation');

var _DelegateOperation3 = _interopRequireDefault(_DelegateOperation2);

var _InsertOperation = require('./InsertOperation');

var _InsertOperation2 = _interopRequireDefault(_InsertOperation);

var _inserter = require('../graphInserter/inserter');

var _inserter2 = _interopRequireDefault(_inserter);

var _GraphInserter = require('../graphInserter/GraphInserter');

var _GraphInserter2 = _interopRequireDefault(_GraphInserter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InsertGraphOperation = function (_DelegateOperation) {
  (0, _inherits3.default)(InsertGraphOperation, _DelegateOperation);

  function InsertGraphOperation(name, opt) {
    (0, _classCallCheck3.default)(this, InsertGraphOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _DelegateOperation.call(this, name, opt));

    if (!_this.delegate.is(_InsertOperation2.default)) {
      throw new Error('Invalid delegate');
    }

    // Our delegate operation inherits from `InsertOperation`. Disable the call-time
    // validation. We do the validation in onAfterQuery instead.
    _this.delegate.modelOptions.skipValidation = true;

    // We need to split the query props deeply.
    _this.delegate.splitQueryPropsDeep = true;
    return _this;
  }

  InsertGraphOperation.prototype.call = function call(builder, args) {
    var retVal = _DelegateOperation.prototype.call.call(this, builder, args);

    // We resolve this query here and will not execute it. This is because the root
    // value may depend on other models in the graph and cannot be inserted first.
    builder.resolve([]);

    return retVal;
  };

  InsertGraphOperation.prototype.onBefore = function onBefore() {
    // Do nothing.
  };

  InsertGraphOperation.prototype.onBeforeInternal = function onBeforeInternal() {
    // Do nothing. We override this with empty implementation so that
    // the $beforeInsert() hooks are not called twice for the root models.
  };

  InsertGraphOperation.prototype.onBeforeBuild = function onBeforeBuild() {
    // Do nothing.
  };

  InsertGraphOperation.prototype.onBuild = function onBuild() {}
  // Do nothing.


  // We overrode all other hooks but this one and do all the work in here.
  // This is a bit hacky.
  ;

  InsertGraphOperation.prototype.onAfterQuery = function onAfterQuery(builder) {
    var _this2 = this;

    // We split the query props from all the models in the graph in the
    // InsertOperation.call method. We need to set the queryProps option
    // so that the individual inserts started by insertFunc all get their
    // query properties.
    builder = builder.clone().internalOptions({
      queryProps: this.queryProps
    });

    var ModelClass = builder.modelClass();
    var insertFunc = (0, _inserter2.default)(builder);

    var graphInserter = new _GraphInserter2.default({
      modelClass: ModelClass,
      models: this.models,
      allowedRelations: builder._allowedInsertExpression || null,
      knex: builder.knex()
    });

    return graphInserter.execute(insertFunc).then(function () {
      return _DelegateOperation.prototype.onAfterQuery.call(_this2, builder, _this2.models);
    });
  };

  InsertGraphOperation.prototype.onAfterInternal = function onAfterInternal() {
    // We override this with empty implementation so that the $afterInsert() hooks
    // are not called twice for the root models.
    return this.isArray ? this.models : this.models[0] || null;
  };

  (0, _createClass3.default)(InsertGraphOperation, [{
    key: 'models',
    get: function get() {
      return this.delegate.models;
    }
  }, {
    key: 'isArray',
    get: function get() {
      return this.delegate.isArray;
    }
  }, {
    key: 'queryProps',
    get: function get() {
      return this.delegate.queryProps;
    }
  }]);
  return InsertGraphOperation;
}(_DelegateOperation3.default);

exports.default = InsertGraphOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkluc2VydEdyYXBoT3BlcmF0aW9uLmpzIl0sIm5hbWVzIjpbIkluc2VydEdyYXBoT3BlcmF0aW9uIiwibmFtZSIsIm9wdCIsImRlbGVnYXRlIiwiaXMiLCJFcnJvciIsIm1vZGVsT3B0aW9ucyIsInNraXBWYWxpZGF0aW9uIiwic3BsaXRRdWVyeVByb3BzRGVlcCIsImNhbGwiLCJidWlsZGVyIiwiYXJncyIsInJldFZhbCIsInJlc29sdmUiLCJvbkJlZm9yZSIsIm9uQmVmb3JlSW50ZXJuYWwiLCJvbkJlZm9yZUJ1aWxkIiwib25CdWlsZCIsIm9uQWZ0ZXJRdWVyeSIsImNsb25lIiwiaW50ZXJuYWxPcHRpb25zIiwicXVlcnlQcm9wcyIsIk1vZGVsQ2xhc3MiLCJtb2RlbENsYXNzIiwiaW5zZXJ0RnVuYyIsImdyYXBoSW5zZXJ0ZXIiLCJtb2RlbHMiLCJhbGxvd2VkUmVsYXRpb25zIiwiX2FsbG93ZWRJbnNlcnRFeHByZXNzaW9uIiwia25leCIsImV4ZWN1dGUiLCJ0aGVuIiwib25BZnRlckludGVybmFsIiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxvQjs7O0FBRW5CLGdDQUFZQyxJQUFaLEVBQWtCQyxHQUFsQixFQUF1QjtBQUFBOztBQUFBLCtEQUNyQiw4QkFBTUQsSUFBTixFQUFZQyxHQUFaLENBRHFCOztBQUdyQixRQUFJLENBQUMsTUFBS0MsUUFBTCxDQUFjQyxFQUFkLDJCQUFMLEVBQXdDO0FBQ3RDLFlBQU0sSUFBSUMsS0FBSixDQUFVLGtCQUFWLENBQU47QUFDRDs7QUFFRDtBQUNBO0FBQ0EsVUFBS0YsUUFBTCxDQUFjRyxZQUFkLENBQTJCQyxjQUEzQixHQUE0QyxJQUE1Qzs7QUFFQTtBQUNBLFVBQUtKLFFBQUwsQ0FBY0ssbUJBQWQsR0FBb0MsSUFBcEM7QUFacUI7QUFhdEI7O2lDQUVEQyxJLGlCQUFLQyxPLEVBQVNDLEksRUFBTTtBQUNsQixRQUFNQyxTQUFTLDZCQUFNSCxJQUFOLFlBQVdDLE9BQVgsRUFBb0JDLElBQXBCLENBQWY7O0FBRUE7QUFDQTtBQUNBRCxZQUFRRyxPQUFSLENBQWdCLEVBQWhCOztBQUVBLFdBQU9ELE1BQVA7QUFDRCxHOztpQ0FjREUsUSx1QkFBVztBQUNUO0FBQ0QsRzs7aUNBRURDLGdCLCtCQUFtQjtBQUNqQjtBQUNBO0FBQ0QsRzs7aUNBRURDLGEsNEJBQWdCO0FBQ2Q7QUFDRCxHOztpQ0FFREMsTyxzQkFBVSxDQUVUO0FBREM7OztBQUdGO0FBQ0E7OztpQ0FDQUMsWSx5QkFBYVIsTyxFQUFTO0FBQUE7O0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLGNBQVVBLFFBQVFTLEtBQVIsR0FBZ0JDLGVBQWhCLENBQWdDO0FBQ3hDQyxrQkFBWSxLQUFLQTtBQUR1QixLQUFoQyxDQUFWOztBQUlBLFFBQU1DLGFBQWFaLFFBQVFhLFVBQVIsRUFBbkI7QUFDQSxRQUFNQyxhQUFhLHdCQUFrQmQsT0FBbEIsQ0FBbkI7O0FBRUEsUUFBTWUsZ0JBQWdCLDRCQUFrQjtBQUN0Q0Ysa0JBQVlELFVBRDBCO0FBRXRDSSxjQUFRLEtBQUtBLE1BRnlCO0FBR3RDQyx3QkFBa0JqQixRQUFRa0Isd0JBQVIsSUFBb0MsSUFIaEI7QUFJdENDLFlBQU1uQixRQUFRbUIsSUFBUjtBQUpnQyxLQUFsQixDQUF0Qjs7QUFPQSxXQUFPSixjQUFjSyxPQUFkLENBQXNCTixVQUF0QixFQUFrQ08sSUFBbEMsQ0FBdUMsWUFBTTtBQUNsRCxhQUFPLDZCQUFNYixZQUFOLGNBQW1CUixPQUFuQixFQUE0QixPQUFLZ0IsTUFBakMsQ0FBUDtBQUNELEtBRk0sQ0FBUDtBQUdELEc7O2lDQUVETSxlLDhCQUFrQjtBQUNoQjtBQUNBO0FBQ0EsV0FBTyxLQUFLQyxPQUFMLEdBQWUsS0FBS1AsTUFBcEIsR0FBOEIsS0FBS0EsTUFBTCxDQUFZLENBQVosS0FBa0IsSUFBdkQ7QUFDRCxHOzs7O3dCQTNEWTtBQUNYLGFBQU8sS0FBS3ZCLFFBQUwsQ0FBY3VCLE1BQXJCO0FBQ0Q7Ozt3QkFFYTtBQUNaLGFBQU8sS0FBS3ZCLFFBQUwsQ0FBYzhCLE9BQXJCO0FBQ0Q7Ozt3QkFFZ0I7QUFDZixhQUFPLEtBQUs5QixRQUFMLENBQWNrQixVQUFyQjtBQUNEOzs7OztrQkFyQ2tCckIsb0IiLCJmaWxlIjoiSW5zZXJ0R3JhcGhPcGVyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGVsZWdhdGVPcGVyYXRpb24gZnJvbSAnLi9EZWxlZ2F0ZU9wZXJhdGlvbic7XG5pbXBvcnQgSW5zZXJ0T3BlcmF0aW9uIGZyb20gJy4vSW5zZXJ0T3BlcmF0aW9uJztcblxuaW1wb3J0IGluc2VydEZ1bmNCdWlsZGVyIGZyb20gJy4uL2dyYXBoSW5zZXJ0ZXIvaW5zZXJ0ZXInO1xuaW1wb3J0IEdyYXBoSW5zZXJ0ZXIgZnJvbSAnLi4vZ3JhcGhJbnNlcnRlci9HcmFwaEluc2VydGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zZXJ0R3JhcGhPcGVyYXRpb24gZXh0ZW5kcyBEZWxlZ2F0ZU9wZXJhdGlvbiB7XG5cbiAgY29uc3RydWN0b3IobmFtZSwgb3B0KSB7XG4gICAgc3VwZXIobmFtZSwgb3B0KTtcblxuICAgIGlmICghdGhpcy5kZWxlZ2F0ZS5pcyhJbnNlcnRPcGVyYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGVsZWdhdGUnKTtcbiAgICB9XG5cbiAgICAvLyBPdXIgZGVsZWdhdGUgb3BlcmF0aW9uIGluaGVyaXRzIGZyb20gYEluc2VydE9wZXJhdGlvbmAuIERpc2FibGUgdGhlIGNhbGwtdGltZVxuICAgIC8vIHZhbGlkYXRpb24uIFdlIGRvIHRoZSB2YWxpZGF0aW9uIGluIG9uQWZ0ZXJRdWVyeSBpbnN0ZWFkLlxuICAgIHRoaXMuZGVsZWdhdGUubW9kZWxPcHRpb25zLnNraXBWYWxpZGF0aW9uID0gdHJ1ZTtcblxuICAgIC8vIFdlIG5lZWQgdG8gc3BsaXQgdGhlIHF1ZXJ5IHByb3BzIGRlZXBseS5cbiAgICB0aGlzLmRlbGVnYXRlLnNwbGl0UXVlcnlQcm9wc0RlZXAgPSB0cnVlO1xuICB9XG5cbiAgY2FsbChidWlsZGVyLCBhcmdzKSB7XG4gICAgY29uc3QgcmV0VmFsID0gc3VwZXIuY2FsbChidWlsZGVyLCBhcmdzKTtcblxuICAgIC8vIFdlIHJlc29sdmUgdGhpcyBxdWVyeSBoZXJlIGFuZCB3aWxsIG5vdCBleGVjdXRlIGl0LiBUaGlzIGlzIGJlY2F1c2UgdGhlIHJvb3RcbiAgICAvLyB2YWx1ZSBtYXkgZGVwZW5kIG9uIG90aGVyIG1vZGVscyBpbiB0aGUgZ3JhcGggYW5kIGNhbm5vdCBiZSBpbnNlcnRlZCBmaXJzdC5cbiAgICBidWlsZGVyLnJlc29sdmUoW10pO1xuXG4gICAgcmV0dXJuIHJldFZhbDtcbiAgfVxuXG4gIGdldCBtb2RlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUubW9kZWxzO1xuICB9XG5cbiAgZ2V0IGlzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUuaXNBcnJheTtcbiAgfVxuXG4gIGdldCBxdWVyeVByb3BzKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLnF1ZXJ5UHJvcHM7XG4gIH1cblxuICBvbkJlZm9yZSgpIHtcbiAgICAvLyBEbyBub3RoaW5nLlxuICB9XG5cbiAgb25CZWZvcmVJbnRlcm5hbCgpIHtcbiAgICAvLyBEbyBub3RoaW5nLiBXZSBvdmVycmlkZSB0aGlzIHdpdGggZW1wdHkgaW1wbGVtZW50YXRpb24gc28gdGhhdFxuICAgIC8vIHRoZSAkYmVmb3JlSW5zZXJ0KCkgaG9va3MgYXJlIG5vdCBjYWxsZWQgdHdpY2UgZm9yIHRoZSByb290IG1vZGVscy5cbiAgfVxuXG4gIG9uQmVmb3JlQnVpbGQoKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxuXG4gIG9uQnVpbGQoKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxuXG4gIC8vIFdlIG92ZXJyb2RlIGFsbCBvdGhlciBob29rcyBidXQgdGhpcyBvbmUgYW5kIGRvIGFsbCB0aGUgd29yayBpbiBoZXJlLlxuICAvLyBUaGlzIGlzIGEgYml0IGhhY2t5LlxuICBvbkFmdGVyUXVlcnkoYnVpbGRlcikge1xuICAgIC8vIFdlIHNwbGl0IHRoZSBxdWVyeSBwcm9wcyBmcm9tIGFsbCB0aGUgbW9kZWxzIGluIHRoZSBncmFwaCBpbiB0aGVcbiAgICAvLyBJbnNlcnRPcGVyYXRpb24uY2FsbCBtZXRob2QuIFdlIG5lZWQgdG8gc2V0IHRoZSBxdWVyeVByb3BzIG9wdGlvblxuICAgIC8vIHNvIHRoYXQgdGhlIGluZGl2aWR1YWwgaW5zZXJ0cyBzdGFydGVkIGJ5IGluc2VydEZ1bmMgYWxsIGdldCB0aGVpclxuICAgIC8vIHF1ZXJ5IHByb3BlcnRpZXMuXG4gICAgYnVpbGRlciA9IGJ1aWxkZXIuY2xvbmUoKS5pbnRlcm5hbE9wdGlvbnMoe1xuICAgICAgcXVlcnlQcm9wczogdGhpcy5xdWVyeVByb3BzXG4gICAgfSk7XG5cbiAgICBjb25zdCBNb2RlbENsYXNzID0gYnVpbGRlci5tb2RlbENsYXNzKCk7XG4gICAgY29uc3QgaW5zZXJ0RnVuYyA9IGluc2VydEZ1bmNCdWlsZGVyKGJ1aWxkZXIpO1xuXG4gICAgY29uc3QgZ3JhcGhJbnNlcnRlciA9IG5ldyBHcmFwaEluc2VydGVyKHtcbiAgICAgIG1vZGVsQ2xhc3M6IE1vZGVsQ2xhc3MsXG4gICAgICBtb2RlbHM6IHRoaXMubW9kZWxzLFxuICAgICAgYWxsb3dlZFJlbGF0aW9uczogYnVpbGRlci5fYWxsb3dlZEluc2VydEV4cHJlc3Npb24gfHwgbnVsbCxcbiAgICAgIGtuZXg6IGJ1aWxkZXIua25leCgpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3JhcGhJbnNlcnRlci5leGVjdXRlKGluc2VydEZ1bmMpLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHN1cGVyLm9uQWZ0ZXJRdWVyeShidWlsZGVyLCB0aGlzLm1vZGVscylcbiAgICB9KTtcbiAgfVxuXG4gIG9uQWZ0ZXJJbnRlcm5hbCgpIHtcbiAgICAvLyBXZSBvdmVycmlkZSB0aGlzIHdpdGggZW1wdHkgaW1wbGVtZW50YXRpb24gc28gdGhhdCB0aGUgJGFmdGVySW5zZXJ0KCkgaG9va3NcbiAgICAvLyBhcmUgbm90IGNhbGxlZCB0d2ljZSBmb3IgdGhlIHJvb3QgbW9kZWxzLlxuICAgIHJldHVybiB0aGlzLmlzQXJyYXkgPyB0aGlzLm1vZGVscyA6ICh0aGlzLm1vZGVsc1swXSB8fCBudWxsKTtcbiAgfVxufVxuIl19