'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _QueryBuilderOperation = require('./QueryBuilderOperation');

var _QueryBuilderOperation2 = _interopRequireDefault(_QueryBuilderOperation);

var _knexUtils = require('../../utils/knexUtils');

var _ReferenceBuilder = require('../ReferenceBuilder');

var _ReferenceBuilder2 = _interopRequireDefault(_ReferenceBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var QueryBuilderBase = null;
var JoinBuilder = null;

var WrappingQueryBuilderOperation = function (_QueryBuilderOperatio) {
  (0, _inherits3.default)(WrappingQueryBuilderOperation, _QueryBuilderOperatio);

  function WrappingQueryBuilderOperation(name, opt) {
    (0, _classCallCheck3.default)(this, WrappingQueryBuilderOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _QueryBuilderOperatio.call(this, name, opt));

    _this.args = null;
    return _this;
  }

  WrappingQueryBuilderOperation.prototype.call = function call(builder, args) {
    var ret = wrapArgs(this, builder, args);
    this.args = args;
    return ret;
  };

  return WrappingQueryBuilderOperation;
}(_QueryBuilderOperation2.default);

exports.default = WrappingQueryBuilderOperation;


function wrapArgs(op, builder, args) {
  // Preventing cyclic deps
  QueryBuilderBase = QueryBuilderBase || requireQueryBuilderBase();

  var skipUndefined = builder.internalOptions().skipUndefined;
  var knex = builder.knex();

  for (var i = 0, l = args.length; i < l; ++i) {
    var arg = args[i];

    if (arg === undefined) {
      if (skipUndefined) {
        return false;
      } else {
        throw new Error('undefined passed as argument #' + l + ' for \'' + op.name + '\' operation. Call skipUndefined() method to ignore the undefined values.');
      }
    } else if (arg instanceof _ReferenceBuilder2.default) {
      args[i] = knex.raw.apply(knex, (0, _toConsumableArray3.default)(args[i].toRawArgs()));
    } else if (arg instanceof QueryBuilderBase) {
      // Convert QueryBuilderBase instances into knex query builders.
      args[i] = arg.build();
    } else if (Array.isArray(arg)) {
      if (skipUndefined) {
        args[i] = withoutUndefined(arg);
      } else if (includesUndefined(arg)) {
        throw new Error('undefined passed as an item in argument #' + l + ' for \'' + op.name + '\' operation. Call skipUndefined() method to ignore the undefined values.');
      }
      // convert reference builders to knex.raw
      args[i] = args[i].map(function (arg) {
        return arg instanceof _ReferenceBuilder2.default ? knex.raw.apply(knex, (0, _toConsumableArray3.default)(arg.toRawArgs())) : arg;
      });
    } else if (typeof arg === 'function') {
      // If an argument is a function, knex calls it with a query builder as
      // first argument (and as `this` context). We wrap the query builder into
      // a QueryBuilderBase instance.
      args[i] = wrapFunctionArg(arg, knex);
    }
  }

  return true;
}

function wrapFunctionArg(func, knex) {
  // Preventing cyclic deps
  QueryBuilderBase = QueryBuilderBase || requireQueryBuilderBase();
  JoinBuilder = JoinBuilder || requireJoinBuilder();

  return function wrappedKnexFunctionArg() {
    if ((0, _knexUtils.isKnexQueryBuilder)(this)) {
      var knexQueryBuilder = this;
      var wrappedQueryBuilder = new QueryBuilderBase(knex);

      func.call(wrappedQueryBuilder, wrappedQueryBuilder);
      wrappedQueryBuilder.buildInto(knexQueryBuilder);
    } else if ((0, _knexUtils.isKnexJoinBuilder)(this)) {
      var _knexQueryBuilder = this;
      var joinClauseBuilder = new JoinBuilder(knex);

      func.call(joinClauseBuilder, joinClauseBuilder);
      joinClauseBuilder.buildInto(_knexQueryBuilder);
    } else {
      return func.apply(this, arguments);
    }
  };
}

function withoutUndefined(arr) {
  var out = [];

  for (var i = 0, l = arr.length; i < l; ++i) {
    if (arr[i] !== undefined) {
      out.push(arr[i]);
    }
  }

  return out;
}

function includesUndefined(arr) {
  for (var i = 0, l = arr.length; i < l; ++i) {
    if (arr[i] === undefined) {
      return true;
    }
  }

  return false;
}

function requireQueryBuilderBase() {
  return require('../QueryBuilderBase').default;
}

function requireJoinBuilder() {
  return require('../JoinBuilder').default;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,