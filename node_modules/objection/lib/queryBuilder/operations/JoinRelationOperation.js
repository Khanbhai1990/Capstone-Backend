'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _QueryBuilderOperation = require('./QueryBuilderOperation');

var _QueryBuilderOperation2 = _interopRequireDefault(_QueryBuilderOperation);

var _RelationJoinBuilder = require('./eager/RelationJoinBuilder');

var _RelationJoinBuilder2 = _interopRequireDefault(_RelationJoinBuilder);

var _RelationExpression = require('../RelationExpression');

var _RelationExpression2 = _interopRequireDefault(_RelationExpression);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JoinRelationOperation = function (_QueryBuilderOperatio) {
  (0, _inherits3.default)(JoinRelationOperation, _QueryBuilderOperatio);

  function JoinRelationOperation(name, opt) {
    (0, _classCallCheck3.default)(this, JoinRelationOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _QueryBuilderOperatio.call(this, name, opt));

    _this.expression = null;
    _this.callOpt = null;
    return _this;
  }

  JoinRelationOperation.prototype.call = function call(builder, args) {
    this.expression = _RelationExpression2.default.parse(args[0]);
    this.callOpt = args[1] || {};
    return true;
  };

  JoinRelationOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var modelClass = builder.modelClass();
    var opt = (0, _assign2.default)({}, this.callOpt);

    opt.aliases = (0, _assign2.default)({}, opt.aliases);
    opt.joinOperation = this.opt.joinOperation;

    // Special case for one single relation.
    if (this.expression.numChildren === 1) {
      var relationName = void 0;

      // A bit crappy way to get the only child.
      this.expression.forEachChild(function (child, childName) {
        relationName = childName;
      });

      var relation = modelClass.getRelation(relationName);
      var alias = null;

      if (opt.alias === false) {
        alias = relation.relatedModelClass.tableName;
      } else if (opt.alias === true || !opt.alias) {
        alias = relation.name;
      } else if (_lodash2.default.isString(opt.alias)) {
        alias = opt.alias;
      }

      if (alias) {
        opt.aliases[relationName] = alias;
      }
    }

    var joinBuilder = new _RelationJoinBuilder2.default({
      modelClass: modelClass,
      expression: this.expression,
      opt: opt
    });

    joinBuilder.buildJoinOnly(builder);
  };

  return JoinRelationOperation;
}(_QueryBuilderOperation2.default);

exports.default = JoinRelationOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkpvaW5SZWxhdGlvbk9wZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJKb2luUmVsYXRpb25PcGVyYXRpb24iLCJuYW1lIiwib3B0IiwiZXhwcmVzc2lvbiIsImNhbGxPcHQiLCJjYWxsIiwiYnVpbGRlciIsImFyZ3MiLCJwYXJzZSIsIm9uQmVmb3JlQnVpbGQiLCJtb2RlbENsYXNzIiwiYWxpYXNlcyIsImpvaW5PcGVyYXRpb24iLCJudW1DaGlsZHJlbiIsInJlbGF0aW9uTmFtZSIsImZvckVhY2hDaGlsZCIsImNoaWxkIiwiY2hpbGROYW1lIiwicmVsYXRpb24iLCJnZXRSZWxhdGlvbiIsImFsaWFzIiwicmVsYXRlZE1vZGVsQ2xhc3MiLCJ0YWJsZU5hbWUiLCJpc1N0cmluZyIsImpvaW5CdWlsZGVyIiwiYnVpbGRKb2luT25seSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxxQjs7O0FBRW5CLGlDQUFZQyxJQUFaLEVBQWtCQyxHQUFsQixFQUF1QjtBQUFBOztBQUFBLCtEQUNyQixpQ0FBTUQsSUFBTixFQUFZQyxHQUFaLENBRHFCOztBQUdyQixVQUFLQyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsVUFBS0MsT0FBTCxHQUFlLElBQWY7QUFKcUI7QUFLdEI7O2tDQUVEQyxJLGlCQUFLQyxPLEVBQVNDLEksRUFBTTtBQUNsQixTQUFLSixVQUFMLEdBQWtCLDZCQUFtQkssS0FBbkIsQ0FBeUJELEtBQUssQ0FBTCxDQUF6QixDQUFsQjtBQUNBLFNBQUtILE9BQUwsR0FBZUcsS0FBSyxDQUFMLEtBQVcsRUFBMUI7QUFDQSxXQUFPLElBQVA7QUFDRCxHOztrQ0FFREUsYSwwQkFBY0gsTyxFQUFTO0FBQ3JCLFFBQU1JLGFBQWFKLFFBQVFJLFVBQVIsRUFBbkI7QUFDQSxRQUFNUixNQUFNLHNCQUFjLEVBQWQsRUFBa0IsS0FBS0UsT0FBdkIsQ0FBWjs7QUFFQUYsUUFBSVMsT0FBSixHQUFjLHNCQUFjLEVBQWQsRUFBa0JULElBQUlTLE9BQXRCLENBQWQ7QUFDQVQsUUFBSVUsYUFBSixHQUFvQixLQUFLVixHQUFMLENBQVNVLGFBQTdCOztBQUVBO0FBQ0EsUUFBSSxLQUFLVCxVQUFMLENBQWdCVSxXQUFoQixLQUFnQyxDQUFwQyxFQUF1QztBQUNyQyxVQUFJQyxxQkFBSjs7QUFFQTtBQUNBLFdBQUtYLFVBQUwsQ0FBZ0JZLFlBQWhCLENBQTZCLFVBQUNDLEtBQUQsRUFBUUMsU0FBUixFQUFzQjtBQUNqREgsdUJBQWVHLFNBQWY7QUFDRCxPQUZEOztBQUlBLFVBQU1DLFdBQVdSLFdBQVdTLFdBQVgsQ0FBdUJMLFlBQXZCLENBQWpCO0FBQ0EsVUFBSU0sUUFBUSxJQUFaOztBQUVBLFVBQUlsQixJQUFJa0IsS0FBSixLQUFjLEtBQWxCLEVBQXlCO0FBQ3ZCQSxnQkFBUUYsU0FBU0csaUJBQVQsQ0FBMkJDLFNBQW5DO0FBQ0QsT0FGRCxNQUVPLElBQUlwQixJQUFJa0IsS0FBSixLQUFjLElBQWQsSUFBc0IsQ0FBQ2xCLElBQUlrQixLQUEvQixFQUFzQztBQUMzQ0EsZ0JBQVFGLFNBQVNqQixJQUFqQjtBQUNELE9BRk0sTUFFQSxJQUFJLGlCQUFFc0IsUUFBRixDQUFXckIsSUFBSWtCLEtBQWYsQ0FBSixFQUEyQjtBQUNoQ0EsZ0JBQVFsQixJQUFJa0IsS0FBWjtBQUNEOztBQUVELFVBQUlBLEtBQUosRUFBVztBQUNUbEIsWUFBSVMsT0FBSixDQUFZRyxZQUFaLElBQTRCTSxLQUE1QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUksY0FBYyxrQ0FBd0I7QUFDMUNkLDRCQUQwQztBQUUxQ1Asa0JBQVksS0FBS0EsVUFGeUI7QUFHMUNELFdBQUtBO0FBSHFDLEtBQXhCLENBQXBCOztBQU1Bc0IsZ0JBQVlDLGFBQVosQ0FBMEJuQixPQUExQjtBQUNELEc7Ozs7O2tCQXREa0JOLHFCIiwiZmlsZSI6IkpvaW5SZWxhdGlvbk9wZXJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUXVlcnlCdWlsZGVyT3BlcmF0aW9uIGZyb20gJy4vUXVlcnlCdWlsZGVyT3BlcmF0aW9uJztcbmltcG9ydCBSZWxhdGlvbkpvaW5CdWlsZGVyIGZyb20gJy4vZWFnZXIvUmVsYXRpb25Kb2luQnVpbGRlcic7XG5pbXBvcnQgUmVsYXRpb25FeHByZXNzaW9uIGZyb20gJy4uL1JlbGF0aW9uRXhwcmVzc2lvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpvaW5SZWxhdGlvbk9wZXJhdGlvbiBleHRlbmRzIFF1ZXJ5QnVpbGRlck9wZXJhdGlvbiB7XG5cbiAgY29uc3RydWN0b3IobmFtZSwgb3B0KSB7XG4gICAgc3VwZXIobmFtZSwgb3B0KTtcblxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IG51bGw7XG4gICAgdGhpcy5jYWxsT3B0ID0gbnVsbDtcbiAgfVxuXG4gIGNhbGwoYnVpbGRlciwgYXJncykge1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IFJlbGF0aW9uRXhwcmVzc2lvbi5wYXJzZShhcmdzWzBdKTtcbiAgICB0aGlzLmNhbGxPcHQgPSBhcmdzWzFdIHx8IHt9O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgb25CZWZvcmVCdWlsZChidWlsZGVyKSB7XG4gICAgY29uc3QgbW9kZWxDbGFzcyA9IGJ1aWxkZXIubW9kZWxDbGFzcygpO1xuICAgIGNvbnN0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY2FsbE9wdCk7XG5cbiAgICBvcHQuYWxpYXNlcyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdC5hbGlhc2VzKTtcbiAgICBvcHQuam9pbk9wZXJhdGlvbiA9IHRoaXMub3B0LmpvaW5PcGVyYXRpb247XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIG9uZSBzaW5nbGUgcmVsYXRpb24uXG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5udW1DaGlsZHJlbiA9PT0gMSkge1xuICAgICAgbGV0IHJlbGF0aW9uTmFtZTtcblxuICAgICAgLy8gQSBiaXQgY3JhcHB5IHdheSB0byBnZXQgdGhlIG9ubHkgY2hpbGQuXG4gICAgICB0aGlzLmV4cHJlc3Npb24uZm9yRWFjaENoaWxkKChjaGlsZCwgY2hpbGROYW1lKSA9PiB7XG4gICAgICAgIHJlbGF0aW9uTmFtZSA9IGNoaWxkTmFtZTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZWxhdGlvbiA9IG1vZGVsQ2xhc3MuZ2V0UmVsYXRpb24ocmVsYXRpb25OYW1lKTtcbiAgICAgIGxldCBhbGlhcyA9IG51bGw7XG5cbiAgICAgIGlmIChvcHQuYWxpYXMgPT09IGZhbHNlKSB7XG4gICAgICAgIGFsaWFzID0gcmVsYXRpb24ucmVsYXRlZE1vZGVsQ2xhc3MudGFibGVOYW1lO1xuICAgICAgfSBlbHNlIGlmIChvcHQuYWxpYXMgPT09IHRydWUgfHwgIW9wdC5hbGlhcykge1xuICAgICAgICBhbGlhcyA9IHJlbGF0aW9uLm5hbWU7XG4gICAgICB9IGVsc2UgaWYgKF8uaXNTdHJpbmcob3B0LmFsaWFzKSkge1xuICAgICAgICBhbGlhcyA9IG9wdC5hbGlhcztcbiAgICAgIH1cblxuICAgICAgaWYgKGFsaWFzKSB7XG4gICAgICAgIG9wdC5hbGlhc2VzW3JlbGF0aW9uTmFtZV0gPSBhbGlhcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBqb2luQnVpbGRlciA9IG5ldyBSZWxhdGlvbkpvaW5CdWlsZGVyKHtcbiAgICAgIG1vZGVsQ2xhc3MsXG4gICAgICBleHByZXNzaW9uOiB0aGlzLmV4cHJlc3Npb24sXG4gICAgICBvcHQ6IG9wdFxuICAgIH0pO1xuXG4gICAgam9pbkJ1aWxkZXIuYnVpbGRKb2luT25seShidWlsZGVyKTtcbiAgfVxufVxuIl19