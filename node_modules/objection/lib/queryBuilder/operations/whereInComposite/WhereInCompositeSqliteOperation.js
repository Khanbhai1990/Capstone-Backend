'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _WrappingQueryBuilderOperation = require('../WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereInCompositeSqliteOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereInCompositeSqliteOperation, _WrappingQueryBuilder);

  function WhereInCompositeSqliteOperation() {
    (0, _classCallCheck3.default)(this, WhereInCompositeSqliteOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereInCompositeSqliteOperation.prototype.onBuild = function onBuild(knexBuilder) {
    this.build(knexBuilder, this.args[0], this.args[1]);
  };

  WhereInCompositeSqliteOperation.prototype.build = function build(knexBuilder, columns, values) {
    var isCompositeKey = Array.isArray(columns) && columns.length > 1;

    if (isCompositeKey) {
      this.buildComposite(knexBuilder, columns, values);
    } else {
      this.buildNonComposite(knexBuilder, columns, values);
    }
  };

  WhereInCompositeSqliteOperation.prototype.buildComposite = function buildComposite(knexBuilder, columns, values) {
    if (!Array.isArray(values)) {
      // If the `values` is not an array of values but a function or a subquery
      // we have no way to implement this method.
      throw new Error('sqlite doesn\'t support multi-column where in clauses');
    }

    // Sqlite doesn't support the `where in` syntax for multiple columns but
    // we can emulate it using grouped `or` clauses.
    knexBuilder.where(function (builder) {
      values.forEach(function (val) {
        builder.orWhere(function (builder) {
          columns.forEach(function (col, idx) {
            builder.andWhere(col, val[idx]);
          });
        });
      });
    });
  };

  WhereInCompositeSqliteOperation.prototype.buildNonComposite = function buildNonComposite(knexBuilder, columns, values) {
    var col = typeof columns === 'string' ? columns : columns[0];

    if (Array.isArray(values)) {
      values = pickNonNull(values, []);
    } else {
      values = [values];
    }

    // For non-composite keys we can use the normal whereIn.
    knexBuilder.whereIn(col, values);
  };

  return WhereInCompositeSqliteOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereInCompositeSqliteOperation;


function pickNonNull(values, output) {
  for (var i = 0, l = values.length; i < l; ++i) {
    var val = values[i];

    if (Array.isArray(val)) {
      pickNonNull(val, output);
    } else if (val !== null && val !== undefined) {
      output.push(val);
    }
  }

  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldoZXJlSW5Db21wb3NpdGVTcWxpdGVPcGVyYXRpb24uanMiXSwibmFtZXMiOlsiV2hlcmVJbkNvbXBvc2l0ZVNxbGl0ZU9wZXJhdGlvbiIsIm9uQnVpbGQiLCJrbmV4QnVpbGRlciIsImJ1aWxkIiwiYXJncyIsImNvbHVtbnMiLCJ2YWx1ZXMiLCJpc0NvbXBvc2l0ZUtleSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImJ1aWxkQ29tcG9zaXRlIiwiYnVpbGROb25Db21wb3NpdGUiLCJFcnJvciIsIndoZXJlIiwiZm9yRWFjaCIsImJ1aWxkZXIiLCJvcldoZXJlIiwiY29sIiwiaWR4IiwiYW5kV2hlcmUiLCJ2YWwiLCJwaWNrTm9uTnVsbCIsIndoZXJlSW4iLCJvdXRwdXQiLCJpIiwibCIsInVuZGVmaW5lZCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0lBRXFCQSwrQjs7Ozs7Ozs7NENBRW5CQyxPLG9CQUFRQyxXLEVBQWE7QUFDbkIsU0FBS0MsS0FBTCxDQUFXRCxXQUFYLEVBQXdCLEtBQUtFLElBQUwsQ0FBVSxDQUFWLENBQXhCLEVBQXNDLEtBQUtBLElBQUwsQ0FBVSxDQUFWLENBQXRDO0FBQ0QsRzs7NENBRURELEssa0JBQU1ELFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDbEMsUUFBSUMsaUJBQWlCQyxNQUFNQyxPQUFOLENBQWNKLE9BQWQsS0FBMEJBLFFBQVFLLE1BQVIsR0FBaUIsQ0FBaEU7O0FBRUEsUUFBSUgsY0FBSixFQUFvQjtBQUNsQixXQUFLSSxjQUFMLENBQW9CVCxXQUFwQixFQUFpQ0csT0FBakMsRUFBMENDLE1BQTFDO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS00saUJBQUwsQ0FBdUJWLFdBQXZCLEVBQW9DRyxPQUFwQyxFQUE2Q0MsTUFBN0M7QUFDRDtBQUNGLEc7OzRDQUVESyxjLDJCQUFlVCxXLEVBQWFHLE8sRUFBU0MsTSxFQUFRO0FBQzNDLFFBQUksQ0FBQ0UsTUFBTUMsT0FBTixDQUFjSCxNQUFkLENBQUwsRUFBNEI7QUFDMUI7QUFDQTtBQUNBLFlBQU0sSUFBSU8sS0FBSix5REFBTjtBQUNEOztBQUVEO0FBQ0E7QUFDQVgsZ0JBQVlZLEtBQVosQ0FBa0IsbUJBQVc7QUFDM0JSLGFBQU9TLE9BQVAsQ0FBZSxlQUFPO0FBQ3BCQyxnQkFBUUMsT0FBUixDQUFnQixtQkFBVztBQUN6Qlosa0JBQVFVLE9BQVIsQ0FBZ0IsVUFBQ0csR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDNUJILG9CQUFRSSxRQUFSLENBQWlCRixHQUFqQixFQUFzQkcsSUFBSUYsR0FBSixDQUF0QjtBQUNELFdBRkQ7QUFHRCxTQUpEO0FBS0QsT0FORDtBQU9ELEtBUkQ7QUFTRCxHOzs0Q0FFRFAsaUIsOEJBQWtCVixXLEVBQWFHLE8sRUFBU0MsTSxFQUFRO0FBQzlDLFFBQUlZLE1BQU8sT0FBT2IsT0FBUCxLQUFtQixRQUFwQixHQUFnQ0EsT0FBaEMsR0FBMENBLFFBQVEsQ0FBUixDQUFwRDs7QUFFQSxRQUFJRyxNQUFNQyxPQUFOLENBQWNILE1BQWQsQ0FBSixFQUEyQjtBQUN6QkEsZUFBU2dCLFlBQVloQixNQUFaLEVBQW9CLEVBQXBCLENBQVQ7QUFDRCxLQUZELE1BRU87QUFDTEEsZUFBUyxDQUFDQSxNQUFELENBQVQ7QUFDRDs7QUFFRDtBQUNBSixnQkFBWXFCLE9BQVosQ0FBb0JMLEdBQXBCLEVBQXlCWixNQUF6QjtBQUNELEc7Ozs7O2tCQS9Da0JOLCtCOzs7QUFrRHJCLFNBQVNzQixXQUFULENBQXFCaEIsTUFBckIsRUFBNkJrQixNQUE3QixFQUFxQztBQUNuQyxPQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJcEIsT0FBT0ksTUFBM0IsRUFBbUNlLElBQUlDLENBQXZDLEVBQTBDLEVBQUVELENBQTVDLEVBQStDO0FBQzdDLFFBQU1KLE1BQU1mLE9BQU9tQixDQUFQLENBQVo7O0FBRUEsUUFBSWpCLE1BQU1DLE9BQU4sQ0FBY1ksR0FBZCxDQUFKLEVBQXdCO0FBQ3RCQyxrQkFBWUQsR0FBWixFQUFpQkcsTUFBakI7QUFDRCxLQUZELE1BRU8sSUFBSUgsUUFBUSxJQUFSLElBQWdCQSxRQUFRTSxTQUE1QixFQUF1QztBQUM1Q0gsYUFBT0ksSUFBUCxDQUFZUCxHQUFaO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPRyxNQUFQO0FBQ0QiLCJmaWxlIjoiV2hlcmVJbkNvbXBvc2l0ZVNxbGl0ZU9wZXJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbiBmcm9tICcuLi9XcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdoZXJlSW5Db21wb3NpdGVTcWxpdGVPcGVyYXRpb24gZXh0ZW5kcyBXcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbiB7XG5cbiAgb25CdWlsZChrbmV4QnVpbGRlcikge1xuICAgIHRoaXMuYnVpbGQoa25leEJ1aWxkZXIsIHRoaXMuYXJnc1swXSwgdGhpcy5hcmdzWzFdKTtcbiAgfVxuXG4gIGJ1aWxkKGtuZXhCdWlsZGVyLCBjb2x1bW5zLCB2YWx1ZXMpIHtcbiAgICBsZXQgaXNDb21wb3NpdGVLZXkgPSBBcnJheS5pc0FycmF5KGNvbHVtbnMpICYmIGNvbHVtbnMubGVuZ3RoID4gMTtcblxuICAgIGlmIChpc0NvbXBvc2l0ZUtleSkge1xuICAgICAgdGhpcy5idWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5idWlsZE5vbkNvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICBidWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgIC8vIElmIHRoZSBgdmFsdWVzYCBpcyBub3QgYW4gYXJyYXkgb2YgdmFsdWVzIGJ1dCBhIGZ1bmN0aW9uIG9yIGEgc3VicXVlcnlcbiAgICAgIC8vIHdlIGhhdmUgbm8gd2F5IHRvIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgc3FsaXRlIGRvZXNuJ3Qgc3VwcG9ydCBtdWx0aS1jb2x1bW4gd2hlcmUgaW4gY2xhdXNlc2ApO1xuICAgIH1cblxuICAgIC8vIFNxbGl0ZSBkb2Vzbid0IHN1cHBvcnQgdGhlIGB3aGVyZSBpbmAgc3ludGF4IGZvciBtdWx0aXBsZSBjb2x1bW5zIGJ1dFxuICAgIC8vIHdlIGNhbiBlbXVsYXRlIGl0IHVzaW5nIGdyb3VwZWQgYG9yYCBjbGF1c2VzLlxuICAgIGtuZXhCdWlsZGVyLndoZXJlKGJ1aWxkZXIgPT4ge1xuICAgICAgdmFsdWVzLmZvckVhY2godmFsID0+IHtcbiAgICAgICAgYnVpbGRlci5vcldoZXJlKGJ1aWxkZXIgPT4ge1xuICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGJ1aWxkZXIuYW5kV2hlcmUoY29sLCB2YWxbaWR4XSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBidWlsZE5vbkNvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAgbGV0IGNvbCA9ICh0eXBlb2YgY29sdW1ucyA9PT0gJ3N0cmluZycpID8gY29sdW1ucyA6IGNvbHVtbnNbMF07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICB2YWx1ZXMgPSBwaWNrTm9uTnVsbCh2YWx1ZXMsIFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgfVxuXG4gICAgLy8gRm9yIG5vbi1jb21wb3NpdGUga2V5cyB3ZSBjYW4gdXNlIHRoZSBub3JtYWwgd2hlcmVJbi5cbiAgICBrbmV4QnVpbGRlci53aGVyZUluKGNvbCwgdmFsdWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwaWNrTm9uTnVsbCh2YWx1ZXMsIG91dHB1dCkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHZhbHVlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCB2YWwgPSB2YWx1ZXNbaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICBwaWNrTm9uTnVsbCh2YWwsIG91dHB1dCk7XG4gICAgfSBlbHNlIGlmICh2YWwgIT09IG51bGwgJiYgdmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dC5wdXNoKHZhbCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuIl19