'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _KnexOperation = require('./operations/KnexOperation');

var _KnexOperation2 = _interopRequireDefault(_KnexOperation);

var _QueryBuilderContextBase = require('./QueryBuilderContextBase');

var _QueryBuilderContextBase2 = _interopRequireDefault(_QueryBuilderContextBase);

var _classUtils = require('../utils/classUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Base functionality to be able to use query builder operation annotations.
 */

var QueryBuilderOperationSupport = function () {
  function QueryBuilderOperationSupport(knex, QueryBuilderContext) {
    (0, _classCallCheck3.default)(this, QueryBuilderOperationSupport);

    /**
     * @type {knex}
     * @protected
     */
    this._knex = knex;
    /**
     * @type {Array.<QueryBuilderOperation>}
     * @protected
     */
    this._operations = [];
    /**
     * @type {QueryBuilderContextBase}
     * @protected
     */
    this._context = new (QueryBuilderContext || _QueryBuilderContextBase2.default)(this._createUserContextBase());
  }

  /**
   * @param {function=} subclassConstructor
   * @return {Constructor.<QueryBuilderOperationSupport>}
   */


  QueryBuilderOperationSupport.extend = function extend(subclassConstructor) {
    (0, _classUtils.inherits)(subclassConstructor, this);
    return subclassConstructor;
  };

  /**
   * @param {Object=} ctx
   * @returns {Object|QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.context = function context(ctx) {
    if (arguments.length === 0) {
      return this._context.userContext;
    } else {
      var ctxBase = this._createUserContextBase();
      this._context.userContext = (0, _assign2.default)(ctxBase, ctx);
      return this;
    }
  };

  /**
   * @param {Object=} ctx
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.mergeContext = function mergeContext(ctx) {
    var oldCtx = this._context.userContext;
    this._context.userContext = (0, _assign2.default)(oldCtx, ctx);
    return this;
  };

  /**
   * @param {QueryBuilderContextBase=} ctx
   * @returns {QueryBuilderContextBase|QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.internalContext = function internalContext(ctx) {
    if (arguments.length === 0) {
      return this._context;
    } else {
      this._context = ctx;
      return this;
    }
  };

  /**
   * @param {Object|InternalOptions} opt
   * @returns {InternalOptions|QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.internalOptions = function internalOptions(opt) {
    if (arguments.length === 0) {
      return this._context.options;
    } else {
      (0, _assign2.default)(this._context.options, opt);
      return this;
    }
  };

  /**
   * @param {knex=} knex
   * @returns {Object|QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.knex = function knex(_knex) {
    if (arguments.length === 0) {
      var knex = this._context.knex || this._knex;

      if (!knex) {
        throw new Error('no database connection available for a query for table ' + this.modelClass().tableName + '. ' + 'You need to bind the model class or the query to a knex instance.');
      }

      return knex;
    } else {
      this._knex = _knex;
      return this;
    }
  };

  /**
   * @param {RegExp|Constructor.<? extends QueryBuilderOperation>} operationSelector
   * @return {QueryBuilderBase}
   */


  QueryBuilderOperationSupport.prototype.clear = function clear(operationSelector) {
    var operations = [];

    this.forEachOperation(operationSelector, function (op) {
      operations.push(op);
    }, false);

    this._operations = operations;
    return this;
  };

  /**
   * @param {QueryBuilderBase} queryBuilder
   * @param {RegExp|Constructor.<? extends QueryBuilderOperation>} operationSelector
   * @return {QueryBuilderBase}
   */


  QueryBuilderOperationSupport.prototype.copyFrom = function copyFrom(queryBuilder, operationSelector) {
    var _this = this;

    queryBuilder.forEachOperation(operationSelector, function (op) {
      _this._operations.push(op);
    });

    return this;
  };

  /**
   * @param {RegExp|Constructor.<? extends QueryBuilderOperation>} operationSelector
   * @returns {boolean}
   */


  QueryBuilderOperationSupport.prototype.has = function has(operationSelector) {
    var found = false;

    this.forEachOperation(operationSelector, function () {
      found = true;
      return false;
    });

    return found;
  };

  /**
   * @param {RegExp|Constructor.<? extends QueryBuilderOperation>} operationSelector
   * @returns {boolean}
   */


  QueryBuilderOperationSupport.prototype.indexOfOperation = function indexOfOperation(operationSelector) {
    var idx = -1;

    this.forEachOperation(operationSelector, function (op, i) {
      idx = i;
      return false;
    });

    return idx;
  };

  /**
   * @param {RegExp|Constructor.<? extends QueryBuilderOperation>} operationSelector
   * @param {function(QueryBuilderOperation)} callback
   * @param {boolean} match
   * @returns {QueryBuilderBase}
   */


  QueryBuilderOperationSupport.prototype.forEachOperation = function forEachOperation(operationSelector, callback) {
    var match = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (operationSelector instanceof RegExp) {
      this._forEachOperationRegex(operationSelector, callback, match);
    } else {
      this._forEachOperationInstanceOf(operationSelector, callback, match);
    }

    return this;
  };

  /**
   * @param {QueryBuilderOperation} operation
   * @param {Array.<*>} args
   * @param {Boolean=} pushFront
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.callQueryBuilderOperation = function callQueryBuilderOperation(operation, args, pushFront) {
    if (operation.call(this, args || [])) {
      if (pushFront) {
        this._operations.unshift(operation);
      } else {
        this._operations.push(operation);
      }
    }

    return this;
  };

  /**
   * @param {string} methodName
   * @param {Array.<*>} args
   * @param {boolean=} pushFront
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.callKnexQueryBuilderOperation = function callKnexQueryBuilderOperation(methodName, args, pushFront) {
    return this.callQueryBuilderOperation(new _KnexOperation2.default(methodName), args, pushFront);
  };

  /**
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.clone = function clone() {
    return this.baseCloneInto(new this.constructor(this.knex()));
  };

  /**
   * @protected
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.baseCloneInto = function baseCloneInto(builder) {
    builder._knex = this._knex;
    builder._operations = this._operations.slice();
    builder._context = this._context.clone();

    return builder;
  };

  /**
   * @returns {knex.QueryBuilder}
   */


  QueryBuilderOperationSupport.prototype.build = function build() {
    return this.buildInto(this.knex().queryBuilder());
  };

  /**
   * @protected
   */


  QueryBuilderOperationSupport.prototype.buildInto = function buildInto(knexBuilder) {
    var tmp = new Array(10);

    var i = 0;
    while (i < this._operations.length) {
      var op = this._operations[i];
      var ln = this._operations.length;

      op.onBeforeBuild(this);

      var numNew = this._operations.length - ln;

      // onBeforeBuild may call methods that add more operations. If
      // this was the case, move the operations to be executed next.
      if (numNew > 0) {
        while (tmp.length < numNew) {
          tmp.push(null);
        }

        // Copy the new operations to tmp.
        for (var j = 0; j < numNew; ++j) {
          tmp[j] = this._operations[ln + j];
        }

        // Make room for the new operations after the current operation.
        for (var _j = ln + numNew - 1; _j > i + numNew; --_j) {
          this._operations[_j] = this._operations[_j - numNew];
        }

        // Move the new operations after the current operation.
        for (var _j2 = 0; _j2 < numNew; ++_j2) {
          this._operations[i + _j2 + 1] = tmp[_j2];
        }
      }

      ++i;
    }

    // onBuild operations should never add new operations. They should only call
    // methods on the knex query builder.
    for (var _i = 0, l = this._operations.length; _i < l; ++_i) {
      this._operations[_i].onBuild(knexBuilder, this);

      if (this._operations.length !== l) {
        throw new Error('onBuild should only call query building methods on the knex builder');
      }
    }

    return knexBuilder;
  };

  /**
   * @returns {string}
   */


  QueryBuilderOperationSupport.prototype.toString = function toString() {
    return this.build().toString();
  };

  /**
   * @returns {string}
   */


  QueryBuilderOperationSupport.prototype.toSql = function toSql() {
    return this.toString();
  };

  /**
   * @returns {QueryBuilderOperationSupport}
   */


  QueryBuilderOperationSupport.prototype.skipUndefined = function skipUndefined() {
    this._context.options.skipUndefined = true;
    return this;
  };

  /**
   * @private
   */


  QueryBuilderOperationSupport.prototype._createUserContextBase = function _createUserContextBase() {
    var _this2 = this;

    var ctxProto = {};

    Object.defineProperty(ctxProto, 'transaction', {
      enumerable: false,
      get: function get() {
        return _this2.knex();
      }
    });

    return (0, _create2.default)(ctxProto);
  };

  /**
   * @private
   */


  QueryBuilderOperationSupport.prototype._forEachOperationRegex = function _forEachOperationRegex(operationSelector, callback, match) {
    for (var i = 0, l = this._operations.length; i < l; ++i) {
      var op = this._operations[i];

      if (operationSelector.test(op.name) === match) {
        if (callback(op, i) === false) {
          break;
        }
      }
    }
  };

  /**
   * @private
   */


  QueryBuilderOperationSupport.prototype._forEachOperationInstanceOf = function _forEachOperationInstanceOf(operationSelector, callback, match) {
    for (var i = 0, l = this._operations.length; i < l; ++i) {
      var op = this._operations[i];

      if (op instanceof operationSelector === match) {
        if (callback(op, i) === false) {
          break;
        }
      }
    }
  };

  return QueryBuilderOperationSupport;
}();

exports.default = QueryBuilderOperationSupport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,