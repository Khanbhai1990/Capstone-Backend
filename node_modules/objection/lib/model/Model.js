'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _keys3 = require('babel-runtime/core-js/object/keys');

var _keys4 = _interopRequireDefault(_keys3);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _desc, _value, _class, _class2, _temp;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _AjvValidator = require('./AjvValidator');

var _AjvValidator2 = _interopRequireDefault(_AjvValidator);

var _QueryBuilder = require('../queryBuilder/QueryBuilder');

var _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);

var _inheritModel = require('./inheritModel');

var _inheritModel2 = _interopRequireDefault(_inheritModel);

var _RelationExpression = require('../queryBuilder/RelationExpression');

var _RelationExpression2 = _interopRequireDefault(_RelationExpression);

var _modelVisitor = require('./modelVisitor');

var _classUtils = require('../utils/classUtils');

var _hiddenData = require('../utils/hiddenData');

var _hiddenData2 = require('../utils/decorators/hiddenData');

var _hiddenData3 = _interopRequireDefault(_hiddenData2);

var _memoize = require('../utils/decorators/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _Relation = require('../relations/Relation');

var _Relation2 = _interopRequireDefault(_Relation);

var _HasOneRelation = require('../relations/hasOne/HasOneRelation');

var _HasOneRelation2 = _interopRequireDefault(_HasOneRelation);

var _HasManyRelation = require('../relations/hasMany/HasManyRelation');

var _HasManyRelation2 = _interopRequireDefault(_HasManyRelation);

var _ManyToManyRelation = require('../relations/manyToMany/ManyToManyRelation');

var _ManyToManyRelation2 = _interopRequireDefault(_ManyToManyRelation);

var _BelongsToOneRelation = require('../relations/belongsToOne/BelongsToOneRelation');

var _BelongsToOneRelation2 = _interopRequireDefault(_BelongsToOneRelation);

var _HasOneThroughRelation = require('../relations/hasOneThrough/HasOneThroughRelation');

var _HasOneThroughRelation2 = _interopRequireDefault(_HasOneThroughRelation);

var _InstanceFindOperation = require('../queryBuilder/operations/InstanceFindOperation');

var _InstanceFindOperation2 = _interopRequireDefault(_InstanceFindOperation);

var _InstanceInsertOperation = require('../queryBuilder/operations/InstanceInsertOperation');

var _InstanceInsertOperation2 = _interopRequireDefault(_InstanceInsertOperation);

var _InstanceUpdateOperation = require('../queryBuilder/operations/InstanceUpdateOperation');

var _InstanceUpdateOperation2 = _interopRequireDefault(_InstanceUpdateOperation);

var _InstanceDeleteOperation = require('../queryBuilder/operations/InstanceDeleteOperation');

var _InstanceDeleteOperation2 = _interopRequireDefault(_InstanceDeleteOperation);

var _JoinEagerOperation = require('../queryBuilder/operations/eager/JoinEagerOperation');

var _JoinEagerOperation2 = _interopRequireDefault(_JoinEagerOperation);

var _WhereInEagerOperation = require('../queryBuilder/operations/eager/WhereInEagerOperation');

var _WhereInEagerOperation2 = _interopRequireDefault(_WhereInEagerOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var JoinEagerAlgorithm = function JoinEagerAlgorithm() {
  return new _JoinEagerOperation2.default('eager');
};

var WhereInEagerAlgorithm = function WhereInEagerAlgorithm() {
  return new _WhereInEagerOperation2.default('eager');
};

/**
 * @typedef {Object} ModelOptions
 *
 * @property {boolean} [patch]
 * @property {boolean} [skipValidation]
 * @property {boolean} [mutable]
 * @property {Model} [old]
 */

var Model = (_dec = (0, _hiddenData3.default)({ name: 'omitFromJson', append: true }), _dec2 = (0, _hiddenData3.default)({ name: 'omitFromDatabaseJson', append: true }), _dec3 = (0, _hiddenData3.default)(), _dec4 = (0, _hiddenData3.default)(), _dec5 = (0, _hiddenData3.default)(), _dec6 = (0, _hiddenData3.default)(), (_class = (_temp = _class2 = function () {
  function Model() {
    (0, _classCallCheck3.default)(this, Model);
  }

  /**
   * @param {*=} id
   * @returns {*}
   */


  /**
   * @type {Constructor.<? extends EagerOperation>}
   */


  /**
   * @type {Array.<string>}
   */


  /**
   * @type {Array.<string>}
   */


  /**
   * @type {RegExp}
   */


  /**
   * @type {string}
   */


  /**
   * @type {string|Array.<string>}
   */


  /**
   * @type {string}
   */
  Model.prototype.$id = function $id(id) {
    if (arguments.length > 0) {
      return setId(this, arguments[0]);
    } else {
      return getId(this);
    }
  };

  /**
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  /**
   * @type {object}
   */


  /**
   * @type {boolean}
   */


  /**
   * @type {Object.<string, RelationMapping>}
   */


  /**
   * @type {Array.<string>}
   */


  /**
   * @type {string}
   */


  /**
   * @type {string}
   */


  /**
   * @type {Object}
   */


  Model.prototype.$query = function $query(trx) {
    var _this = this;

    var ModelClass = this.constructor;

    return ModelClass.QueryBuilder.forClass(ModelClass).transacting(trx).findOperationFactory(function () {
      return new _InstanceFindOperation2.default('find', { instance: _this });
    }).insertOperationFactory(function () {
      return new _InstanceInsertOperation2.default('insert', { instance: _this });
    }).updateOperationFactory(function () {
      return new _InstanceUpdateOperation2.default('update', { instance: _this });
    }).patchOperationFactory(function () {
      return new _InstanceUpdateOperation2.default('patch', { instance: _this, modelOptions: { patch: true } });
    }).deleteOperationFactory(function () {
      return new _InstanceDeleteOperation2.default('delete', { instance: _this });
    }).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {string} relationName
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  Model.prototype.$relatedQuery = function $relatedQuery(relationName, trx) {
    var _this2 = this;

    var ModelClass = this.constructor;
    var relation = ModelClass.getRelation(relationName);
    var RelatedModelClass = relation.relatedModelClass;

    return ModelClass.RelatedQueryBuilder.forClass(RelatedModelClass).transacting(trx).findOperationFactory(function (builder) {
      return relation.find(builder, [_this2]);
    }).insertOperationFactory(function (builder) {
      return relation.insert(builder, _this2);
    }).updateOperationFactory(function (builder) {
      return relation.update(builder, _this2);
    }).patchOperationFactory(function (builder) {
      return relation.patch(builder, _this2);
    }).deleteOperationFactory(function (builder) {
      return relation.delete(builder, _this2);
    }).relateOperationFactory(function (builder) {
      return relation.relate(builder, _this2);
    }).unrelateOperationFactory(function (builder) {
      return relation.unrelate(builder, _this2);
    });
  };

  /**
   * @param {string|RelationExpression} relationExpression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {QueryBuilder}
   */


  Model.prototype.$loadRelated = function $loadRelated(relationExpression, filters) {
    return this.constructor.loadRelated(this, relationExpression, filters);
  };

  /**
   * @param {Object} jsonSchema
   * @param {Object} json
   * @param {ModelOptions=} options
   * @return {Object}
   */


  Model.prototype.$beforeValidate = function $beforeValidate(jsonSchema, json, options) {
    /* istanbul ignore next */
    return jsonSchema;
  };

  /**
   * @param {Object=} json
   * @param {ModelOptions=} options
   * @throws {ValidationError}
   * @return {Object}
   */


  Model.prototype.$validate = function $validate() {
    var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
    var options = arguments[1];

    options = options || {};

    if (json instanceof Model) {
      // Strip away relations and other internal stuff.
      json = cloneModel(json, true, true);
      // We can mutate `json` now that we took a copy of it.
      options.mutable = true;
    }

    if (options.skipValidation) {
      return json;
    }

    var validator = this.constructor.getValidator();
    var args = {
      options: options,
      model: this,
      json: json,
      ctx: (0, _create2.default)(null)
    };

    validator.beforeValidate(args);
    json = validator.validate(args);
    validator.afterValidate(args);

    return json;
  };

  /**
   * @param {Object=} json
   * @param {ModelOptions=} options
   */


  Model.prototype.$afterValidate = function $afterValidate(json, options) {}
  // Do nothing by default.


  /**
   * @param {Object} json
   * @return {Object}
   */
  ;

  Model.prototype.$parseDatabaseJson = function $parseDatabaseJson(json) {
    var jsonAttr = this.constructor.getJsonAttributes();

    if (jsonAttr.length) {
      // JSON attributes may be returned as strings depending on the database and
      // the database client. Convert them to objects here.
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isString(value)) {
          var parsed = tryParseJson(value);

          // tryParseJson returns undefined if parsing failed.
          if (parsed !== undefined) {
            json[attr] = parsed;
          }
        }
      }
    }

    return json;
  };

  /**
   * @param {Object} json
   * @return {Object}
   */


  Model.prototype.$formatDatabaseJson = function $formatDatabaseJson(json) {
    var jsonAttr = this.constructor.getJsonAttributes();

    if (jsonAttr.length) {
      // All database clients want JSON columns as strings. Do the conversion here.
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isObject(value)) {
          json[attr] = (0, _stringify2.default)(value);
        }
      }
    }

    return json;
  };

  /**
   * @param {Object} json
   * @param {ModelOptions=} options
   * @return {Object}
   */


  Model.prototype.$parseJson = function $parseJson(json, options) {
    return json;
  };

  /**
   * @param {Object} json
   * @return {Object}
   */


  Model.prototype.$formatJson = function $formatJson(json) {
    return json;
  };

  /**
   * @param {Object} json
   * @param {ModelOptions=} options
   * @returns {Model}
   * @throws ValidationError
   */


  Model.prototype.$setJson = function $setJson(json) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    json = json || {};

    if (Object.prototype.toString.call(json) !== '[object Object]') {
      throw new Error('You should only pass objects to $setJson method. ' + '$setJson method was given an invalid value ' + json);
    }

    json = this.$parseJson(json, options);
    json = this.$validate(json, options);
    this.$set(json);

    var relations = this.constructor.getRelationArray();
    // Parse relations into Model instances.
    for (var i = 0, l = relations.length; i < l; ++i) {
      var relation = relations[i];
      var relationName = relation.name;
      var relationJson = json[relationName];

      if (relationJson !== undefined) {
        if (Array.isArray(relationJson)) {
          this[relationName] = relation.relatedModelClass.ensureModelArray(relationJson, options);
        } else if (relationJson) {
          this[relationName] = relation.relatedModelClass.ensureModel(relationJson, options);
        } else {
          this[relationName] = null;
        }
      }
    }
  };

  /**
   * @param {Object} json
   * @returns {Model}
   */


  Model.prototype.$setDatabaseJson = function $setDatabaseJson(json) {
    json = this.$parseDatabaseJson(json);

    if (json) {
      var keys = (0, _keys4.default)(json);

      for (var i = 0, l = keys.length; i < l; ++i) {
        var key = keys[i];
        this[key] = json[key];
      }
    }

    return this;
  };

  /**
   * @param {Object} obj
   * @returns {Model}
   */


  Model.prototype.$set = function $set(obj) {
    if (obj) {
      var keys = (0, _keys4.default)(obj);

      for (var i = 0, l = keys.length; i < l; ++i) {
        var key = keys[i];
        var value = obj[key];

        if (key.charAt(0) !== '$' && typeof value !== 'function') {
          this[key] = value;
        }
      }
    }

    return this;
  };

  /**
   * @param {boolean=} shallow
   */


  Model.prototype.$toJson = function $toJson(shallow) {
    if (shallow) {
      return this.$$toJson(false, this.constructor.getRelations(), null);
    } else {
      return this.$$toJson(false, null, null);
    }
  };

  Model.prototype.toJSON = function toJSON() {
    return this.$toJson(false);
  };

  /**
   * @override
   */


  Model.prototype.$toDatabaseJson = function $toDatabaseJson() {
    var jsonSchema = this.constructor.getJsonSchema();

    if (jsonSchema && this.constructor.pickJsonSchemaProperties) {
      return this.$$toJson(true, null, jsonSchema.properties);
    } else {
      return this.$$toJson(true, this.constructor.getRelations(), null);
    }
  };

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeInsert = function $beforeInsert(queryContext) {};

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterInsert = function $afterInsert(queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeUpdate = function $beforeUpdate(opt, queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterUpdate = function $afterUpdate(opt, queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterGet = function $afterGet(queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeDelete = function $beforeDelete(queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterDelete = function $afterDelete(queryContext) {};

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {function(Model)} callback
   * @return {Model}
   */


  Model.prototype.$traverse = function $traverse(filterConstructor, callback) {
    if (_lodash2.default.isUndefined(callback)) {
      callback = filterConstructor;
      filterConstructor = null;
    }

    this.constructor.traverse(filterConstructor, this, callback);
    return this;
  };

  /**
   * @param {string|Array.<string>|Object.<string, boolean>} keys
   * @returns {Model}
   */


  Model.prototype.$omit = function $omit() {
    if (arguments.length === 1 && _lodash2.default.isObject(arguments[0])) {
      var keys = arguments[0];

      if (Array.isArray(keys)) {
        omitArray(this, keys);
      } else {
        omitObject(this, keys);
      }
    } else {
      var _keys = new Array(arguments.length);

      for (var i = 0, l = _keys.length; i < l; ++i) {
        _keys[i] = arguments[i];
      }

      omitArray(this, _keys);
    }

    return this;
  };

  /**
   * @param {string|Array.<string>|Object.<string, boolean>} keys
   * @returns {Model} `this` for chaining.
   */


  Model.prototype.$pick = function $pick() {
    if (arguments.length === 1 && _lodash2.default.isObject(arguments[0])) {
      var keys = arguments[0];

      if (Array.isArray(keys)) {
        pickArray(this, keys);
      } else {
        pickObject(this, keys);
      }
    } else {
      var _keys2 = new Array(arguments.length);

      for (var i = 0, l = _keys2.length; i < l; ++i) {
        _keys2[i] = arguments[i];
      }

      pickArray(this, _keys2);
    }

    return this;
  };

  /**
   * @param {Array.<string>} props
   * @return {Array.<*>}
   */


  Model.prototype.$values = function $values() {
    if (arguments.length === 0) {
      return _lodash2.default.values(this);
    } else {
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return this.$$values(arguments[0]);
      } else {
        var args = new Array(arguments.length);

        for (var i = 0, l = args.length; i < l; ++i) {
          args[i] = arguments[i];
        }

        return this.$$values(args);
      }
    }
  };

  /**
   * @private
   */


  Model.prototype.$$values = function $$values(args) {
    switch (args.length) {
      case 1:
        return [this[args[0]]];
      case 2:
        return [this[args[0]], this[args[1]]];
      case 3:
        return [this[args[0]], this[args[1]], this[args[2]]];
      default:
        {
          var ret = new Array(args.length);

          for (var i = 0, l = args.length; i < l; ++i) {
            ret[i] = this[args[i]];
          }

          return ret;
        }
    }
  };

  /**
   * @param {Array.<string>} props
   * @return {string}
   */


  Model.prototype.$propKey = function $propKey(props) {
    switch (props.length) {
      case 1:
        return this[props[0]] + '';
      case 2:
        return this[props[0]] + ',' + this[props[1]];
      case 3:
        return this[props[0]] + ',' + this[props[1]] + ',' + this[props[2]];
      default:
        {
          var key = '';

          for (var i = 0, l = props.length; i < l; ++i) {
            key += this[props[i]] + (i < props.length - 1 ? ',' : '');
          }

          return key;
        }
    }
  };

  /**
   * @param {boolean} shallow
   * @return {Model}
   */


  Model.prototype.$clone = function $clone(shallow) {
    return cloneModel(this, shallow, false);
  };

  /**
   * @param {Array.<string>=} keys
   * @returns {Array.<string>}
   */


  Model.prototype.$omitFromJson = function $omitFromJson(keys) {};

  /**
   * @param {Array.<string>=} keys
   * @returns {Array.<string>}
   */


  Model.prototype.$omitFromDatabaseJson = function $omitFromDatabaseJson(keys) {};

  /**
   * @returns {knex}
   */


  Model.prototype.$knex = function $knex() {
    return this.constructor.knex();
  };

  /**
   * @returns {knex}
   */


  Model.prototype.$transaction = function $transaction() {
    return this.constructor.transaction();
  };

  /**
   * @protected
   */


  Model.prototype.$$toJson = function $$toJson(createDbJson, omit, pick) {
    var json = toJsonImpl(this, createDbJson, omit, pick);

    if (createDbJson) {
      return this.$formatDatabaseJson(json);
    } else {
      return this.$formatJson(json);
    }
  };

  /**
   * @param {function=} subclassConstructor
   * @return {Constructor.<Model>}
   */


  Model.extend = function extend(subclassConstructor) {
    if (_lodash2.default.isEmpty(subclassConstructor.name)) {
      throw new Error('Each Model subclass constructor must have a name');
    }

    (0, _classUtils.inherits)(subclassConstructor, this);
    return subclassConstructor;
  };

  /**
   * @param {Object=} json
   * @param {ModelOptions=} options
   * @returns {Model}
   * @throws ValidationError
   */


  Model.fromJson = function fromJson(json, options) {
    var model = new this();
    model.$setJson(json || {}, options);
    return model;
  };

  /**
   * @param {Object=} json
   * @returns {Model}
   */


  Model.fromDatabaseJson = function fromDatabaseJson(json) {
    var model = new this();
    model.$setDatabaseJson(json || {});
    return model;
  };

  /**
   * @param {Object} obj
   * @param {string} prop
   */


  Model.omitImpl = function omitImpl(obj, prop) {
    delete obj[prop];
  };

  /**
   * @return {Validator}
   */


  Model.createValidator = function createValidator() {
    return new _AjvValidator2.default({
      onCreateAjv: function onCreateAjv(ajv) {/* Do Nothing by default */},
      options: {
        allErrors: true,
        validateSchema: false,
        ownProperties: true,
        v5: true
      }
    });
  };

  /**
   * @return {Validator}
   */


  Model.getValidator = function getValidator() {
    return this.createValidator();
  };

  /**
   * @return {Object}
   */


  Model.getJsonSchema = function getJsonSchema() {
    // Memoized getter in case jsonSchema is a getter property (usually is with ES6).
    return this.jsonSchema;
  };

  /**
   * @param {string} columnName
   * @returns {string}
   */


  Model.columnNameToPropertyName = function columnNameToPropertyName(columnName) {
    var model = new this();
    var addedProps = _lodash2.default.keys(model.$parseDatabaseJson({}));

    var row = {};
    row[columnName] = null;

    var props = _lodash2.default.keys(model.$parseDatabaseJson(row));
    var propertyName = _lodash2.default.first(_lodash2.default.difference(props, addedProps));

    return propertyName || null;
  };

  /**
   * @param {string} propertyName
   * @returns {string}
   */


  Model.propertyNameToColumnName = function propertyNameToColumnName(propertyName) {
    var model = new this();
    var addedCols = _lodash2.default.keys(model.$formatDatabaseJson({}));

    var obj = {};
    obj[propertyName] = null;

    var cols = _lodash2.default.keys(model.$formatDatabaseJson(obj));
    var columnName = _lodash2.default.first(_lodash2.default.difference(cols, addedCols));

    return columnName || null;
  };

  /**
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  Model.query = function query(trx) {
    var ModelClass = this;

    return ModelClass.QueryBuilder.forClass(ModelClass).transacting(trx).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {knex=} knex
   * @returns {knex}
   */


  Model.knex = function knex() {
    if (arguments.length) {
      // We cannot save this to hiddenData because values
      // in there don't get inherited automatically when
      // a class is inherited.
      Object.defineProperty(this, '$$knex', {
        enumerable: false,
        writable: true,
        value: arguments[0]
      });
    } else {
      return this.$$knex;
    }
  };

  /**
   * @returns {knex}
   */


  Model.transaction = function transaction() {
    return this.knex();
  };

  /**
   * @return {Raw}
   */


  Model.raw = function raw() {
    var knex = this.knex();
    return knex.raw.apply(knex, arguments);
  };

  /**
   * @return {Object}
   */


  Model.fn = function fn() {
    var knex = this.knex();
    return knex.fn;
  };

  /**
   * @return {Formatter}
   */


  Model.formatter = function formatter() {
    return this.knex().client.formatter();
  };

  /**
   * @returns {knex.QueryBuilder}
   */


  Model.knexQuery = function knexQuery() {
    return this.knex().table(this.tableName);
  };

  /**
   * @returns {string}
   */


  Model.uniqueTag = function uniqueTag() {
    return this.tableName;
  };

  /**
   * @param {knex} knex
   * @returns {Constructor.<Model>}
   */


  Model.bindKnex = function bindKnex(knex) {
    var ModelClass = this;

    if (!knex.$$objection) {
      Object.defineProperty(knex, '$$objection', {
        enumerable: false,
        writable: false,
        value: {
          boundModels: (0, _create2.default)(null)
        }
      });
    }

    // Check if this model class has already been bound to the given knex.
    if (knex.$$objection.boundModels[ModelClass.uniqueTag()]) {
      return knex.$$objection.boundModels[ModelClass.uniqueTag()];
    }

    // Create a new subclass of this class.
    var BoundModelClass = (0, _inheritModel2.default)(ModelClass);

    // The bound model is equal to the source model in every way. We want to copy
    // the hidden data as-is from the source so that we don't get the performance
    // penalty of calculating all memoized etc. values again.
    (0, _hiddenData.inheritHiddenData)(ModelClass, BoundModelClass);

    BoundModelClass.knex(knex);
    knex.$$objection.boundModels[ModelClass.uniqueTag()] = BoundModelClass;

    var boundRelations = (0, _create2.default)(null);
    var relations = ModelClass.getRelationArray();

    for (var i = 0, l = relations.length; i < l; ++i) {
      var relation = relations[i];
      boundRelations[relation.name] = relation.bindKnex(knex);
    }

    BoundModelClass.relations = boundRelations;
    BoundModelClass.relationArray = _lodash2.default.values(boundRelations);

    return BoundModelClass;
  };

  /**
   * @param {knex} trx
   * @returns {Constructor.<Model>}
   */


  Model.bindTransaction = function bindTransaction(trx) {
    return this.bindKnex(trx);
  };

  /**
   * @param {Model|Object} model
   * @param {ModelOptions=} options
   * @returns {Model}
   */


  Model.ensureModel = function ensureModel(model, options) {
    var ModelClass = this;

    if (!model) {
      return null;
    }

    if (model instanceof ModelClass) {
      return model;
    } else {
      return ModelClass.fromJson(model, options);
    }
  };

  /**
   * @param {Array.<Model|Object>} input
   * @param {ModelOptions=} options
   * @returns {Array.<Model>}
   */


  Model.ensureModelArray = function ensureModelArray(input, options) {
    if (!input) {
      return [];
    }

    if (Array.isArray(input)) {
      var models = new Array(input.length);

      for (var i = 0, l = input.length; i < l; ++i) {
        models[i] = this.ensureModel(input[i], options);
      }

      return models;
    } else {
      return [this.ensureModel(input, options)];
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdColumnArray = function getIdColumnArray() {
    if (Array.isArray(this.idColumn)) {
      return this.idColumn;
    } else {
      return [this.idColumn];
    }
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getFullIdColumn = function getFullIdColumn() {
    var _this3 = this;

    if (Array.isArray(this.idColumn)) {
      return this.idColumn.map(function (col) {
        return _this3.tableName + '.' + col;
      });
    } else {
      return this.tableName + '.' + this.idColumn;
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdPropertyArray = function getIdPropertyArray() {
    var _this4 = this;

    return this.getIdColumnArray().map(function (col) {
      return idColumnToIdProperty(_this4, col);
    });
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getIdProperty = function getIdProperty() {
    var _this5 = this;

    if (Array.isArray(this.idColumn)) {
      return this.idColumn.map(function (col) {
        return idColumnToIdProperty(_this5, col);
      });
    } else {
      return idColumnToIdProperty(this, this.idColumn);
    }
  };

  /**
   * @private
   */


  /**
   * @return {Object.<string, Relation>}
   */
  Model.getRelations = function getRelations() {
    var _this6 = this;

    var relations = this.relations;

    if (!relations) {
      relations = _lodash2.default.reduce(_lodash2.default.result(this, 'relationMappings'), function (relations, mapping, relationName) {
        relations[relationName] = new mapping.relation(relationName, _this6);
        relations[relationName].setMapping(mapping);
        return relations;
      }, (0, _create2.default)(null));

      this.relations = relations;
    }

    return relations;
  };

  /**
   * @return {Array.<Relation>}
   */


  Model.getRelationArray = function getRelationArray() {
    var relationArray = this.relationArray;

    if (!relationArray) {
      relationArray = _lodash2.default.values(this.getRelations());
      this.relationArray = relationArray;
    }

    return relationArray;
  };

  /**
   * @return {Relation}
   */


  Model.getRelation = function getRelation(name) {
    var relation = this.getRelations()[name];

    if (!relation) {
      throw new Error('A model class (tableName = ' + this.tableName + ') doesn\'t have relation ' + name);
    }

    return relation;
  };

  /**
   * @param {Array.<Model|Object>} $models
   * @param {string|RelationExpression} expression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {QueryBuilder}
   */


  Model.loadRelated = function loadRelated($models, expression, filters) {
    return this.query().resolve(this.ensureModelArray($models)).findOptions({ dontCallAfterGet: true }).eager(expression, filters).runAfter(function (models) {
      return Array.isArray($models) ? models : models[0];
    });
  };

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {Model|Array.<Model>} models
   * @param {function(Model, Model, string)} traverser
   * @return {Model}
   */


  Model.traverse = function traverse(filterConstructor, models, traverser) {
    filterConstructor = filterConstructor || null;

    if (_lodash2.default.isUndefined(traverser)) {
      traverser = models;
      models = filterConstructor;
      filterConstructor = null;
    }

    if (!_lodash2.default.isFunction(traverser)) {
      throw new Error('traverser must be a function');
    }

    if (_lodash2.default.isEmpty(models)) {
      return this;
    }

    var modelClass = Array.isArray(models) ? models[0].constructor : models.constructor;

    (0, _modelVisitor.visitModels)(models, modelClass, function (model, modelClass, parent, relation) {
      if (!filterConstructor || model instanceof filterConstructor) {
        traverser(model, parent, relation && relation.name);
      }
    });

    return this;
  };

  /**
   * @protected
   * @returns {Array.<string>}
   */


  Model.getJsonAttributes = function getJsonAttributes() {
    var _this7 = this;

    // If the jsonAttributes property is not set, try to create it based
    // on the jsonSchema. All properties that are objects or arrays must
    // be converted to JSON.
    if (!this.jsonAttributes && this.getJsonSchema()) {
      this.jsonAttributes = [];

      _lodash2.default.forOwn(this.getJsonSchema().properties, function (prop, propName) {
        var types = _lodash2.default.compact(ensureArray(prop.type));

        if (types.length === 0 && Array.isArray(prop.anyOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.anyOf, 'type'));
        }

        if (types.length === 0 && Array.isArray(prop.oneOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.oneOf, 'type'));
        }

        if (_lodash2.default.includes(types, 'object') || _lodash2.default.includes(types, 'array')) {
          _this7.jsonAttributes.push(propName);
        }
      });
    }

    if (!Array.isArray(this.jsonAttributes)) {
      this.jsonAttributes = [];
    }

    return this.jsonAttributes;
  };

  (0, _createClass3.default)(Model, null, [{
    key: 'relations',
    get: function get() {}

    /**
     * @private
     */
    ,
    set: function set(value) {}

    /**
     * @private
     */

  }, {
    key: 'relationArray',
    get: function get() {}

    /**
     * @private
     */
    ,
    set: function set(value) {}
  }]);
  return Model;
}(), _class2.QueryBuilder = _QueryBuilder2.default, _class2.RelatedQueryBuilder = _QueryBuilder2.default, _class2.HasOneRelation = _HasOneRelation2.default, _class2.HasManyRelation = _HasManyRelation2.default, _class2.ManyToManyRelation = _ManyToManyRelation2.default, _class2.BelongsToOneRelation = _BelongsToOneRelation2.default, _class2.HasOneThroughRelation = _HasOneThroughRelation2.default, _class2.JoinEagerAlgorithm = JoinEagerAlgorithm, _class2.WhereInEagerAlgorithm = WhereInEagerAlgorithm, _class2.tableName = null, _class2.jsonSchema = null, _class2.idColumn = 'id', _class2.uidProp = '#id', _class2.uidRefProp = '#ref', _class2.dbRefProp = '#dbRef', _class2.propRefRegex = /#ref{([^\.]+)\.([^}]+)}/g, _class2.jsonAttributes = null, _class2.virtualAttributes = null, _class2.relationMappings = null, _class2.modelPaths = [], _class2.pickJsonSchemaProperties = true, _class2.defaultEagerAlgorithm = WhereInEagerAlgorithm, _class2.defaultEagerOptions = null, _temp), (_applyDecoratedDescriptor(_class.prototype, '$omitFromJson', [_dec], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '$omitFromJson'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '$omitFromDatabaseJson', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '$omitFromDatabaseJson'), _class.prototype), _applyDecoratedDescriptor(_class, 'getValidator', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getValidator'), _class), _applyDecoratedDescriptor(_class, 'getJsonSchema', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getJsonSchema'), _class), _applyDecoratedDescriptor(_class, 'columnNameToPropertyName', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'columnNameToPropertyName'), _class), _applyDecoratedDescriptor(_class, 'propertyNameToColumnName', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'propertyNameToColumnName'), _class), _applyDecoratedDescriptor(_class, 'getIdColumnArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdColumnArray'), _class), _applyDecoratedDescriptor(_class, 'getFullIdColumn', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getFullIdColumn'), _class), _applyDecoratedDescriptor(_class, 'getIdPropertyArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdPropertyArray'), _class), _applyDecoratedDescriptor(_class, 'getIdProperty', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdProperty'), _class), _applyDecoratedDescriptor(_class, 'relations', [_dec3], (0, _getOwnPropertyDescriptor2.default)(_class, 'relations'), _class), _applyDecoratedDescriptor(_class, 'relationArray', [_dec4], (0, _getOwnPropertyDescriptor2.default)(_class, 'relationArray'), _class), _applyDecoratedDescriptor(_class, 'relations', [_dec5], (0, _getOwnPropertyDescriptor2.default)(_class, 'relations'), _class), _applyDecoratedDescriptor(_class, 'relationArray', [_dec6], (0, _getOwnPropertyDescriptor2.default)(_class, 'relationArray'), _class)), _class));
exports.default = Model;


function setId(model, id) {
  var idProp = model.constructor.getIdProperty();
  var isArray = Array.isArray(idProp);

  if (Array.isArray(id)) {
    if (isArray) {
      if (id.length !== idProp.length) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      for (var i = 0; i < id.length; ++i) {
        model[idProp[i]] = id[i];
      }
    } else {
      if (id.length !== 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp] = id[0];
    }
  } else {
    if (isArray) {
      if (idProp.length > 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp[0]] = id;
    } else {
      model[idProp] = id;
    }
  }
}

function getId(model) {
  var idProp = model.constructor.getIdProperty();

  if (Array.isArray(idProp)) {
    return model.$values(idProp);
  } else {
    return model[idProp];
  }
}

function tryParseJson(maybeJsonStr) {
  try {
    return JSON.parse(maybeJsonStr);
  } catch (err) {
    // Ignore error.
  }

  return undefined;
}

function toJsonImpl(model, createDbJson, omit, pick) {
  if (createDbJson) {
    return toDatabaseJsonImpl(model, omit, pick);
  } else {
    return toExternalJsonImpl(model, omit, pick);
  }
}

function toDatabaseJsonImpl(model, omit, pick) {
  var json = {};
  var omitFromJson = model.$omitFromDatabaseJson();
  var keys = (0, _keys4.default)(model);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    assignJsonValue(json, key, model[key], omit, pick, omitFromJson, true);
  }

  return json;
}

function toExternalJsonImpl(model, omit, pick) {
  var json = {};
  var omitFromJson = model.$omitFromJson();
  var keys = (0, _keys4.default)(model);
  var vAttr = model.constructor.virtualAttributes;

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var value = model[key];

    assignJsonValue(json, key, value, omit, pick, omitFromJson, false);
  }

  if (vAttr) {
    assignVirtualAttributes(json, model, vAttr, omit, pick, omitFromJson);
  }

  return json;
}

function assignVirtualAttributes(json, model, vAttr, omit, pick, omitFromJson) {
  for (var i = 0, l = vAttr.length; i < l; ++i) {
    var key = vAttr[i];
    var value = model[key];

    if (typeof value === 'function') {
      value = value.call(model);
    }

    assignJsonValue(json, key, value, omit, pick, omitFromJson, false);
  }
}

function assignJsonValue(json, key, value, omit, pick, omitFromJson, createDbJson) {
  var type = typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value);

  if (key.charAt(0) !== '$' && type !== 'function' && type !== 'undefined' && (!omit || !omit[key]) && (!pick || pick[key]) && (!omitFromJson || !contains(omitFromJson, key))) {

    if (value !== null && type === 'object') {
      json[key] = toJsonObject(value, createDbJson);
    } else {
      json[key] = value;
    }
  }
}

function toJsonObject(value, createDbJson) {
  if (Array.isArray(value)) {
    return toJsonArray(value, createDbJson);
  } else if (value instanceof Model) {
    if (createDbJson) {
      return value.$toDatabaseJson();
    } else {
      return value.$toJson();
    }
  } else if (Buffer.isBuffer(value)) {
    return value;
  } else {
    return _lodash2.default.cloneDeep(value);
  }
}

function toJsonArray(value, createDbJson) {
  var ret = new Array(value.length);

  for (var i = 0, l = ret.length; i < l; ++i) {
    ret[i] = toJsonObject(value[i], createDbJson);
  }

  return ret;
}

function cloneModel(model, shallow, stripInternal) {
  var clone = null;

  var omitFromJson = model.$omitFromJson();
  var omitFromDatabaseJson = model.$omitFromDatabaseJson();

  if (!shallow && !stripInternal) {
    clone = cloneModelSimple(model);
  } else {
    clone = cloneModelWithOpt(model, shallow, stripInternal);
  }

  if (omitFromJson) {
    clone.$omitFromJson(omitFromJson);
  }

  if (omitFromDatabaseJson) {
    clone.$omitFromDatabaseJson(omitFromDatabaseJson);
  }

  return clone;
}

function cloneModelSimple(model) {
  var clone = new model.constructor();
  var keys = (0, _keys4.default)(model);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var value = model[key];

    if (value !== null && (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
      clone[key] = cloneObject(value);
    } else {
      clone[key] = value;
    }
  }

  return clone;
}

function cloneModelWithOpt(model, shallow, stripInternal) {
  var clone = new model.constructor();
  var keys = (0, _keys4.default)(model);
  var relations = model.constructor.getRelations();

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var value = model[key];

    if (shallow && relations[key]) {
      continue;
    }

    if (stripInternal && key.charAt(0) === '$') {
      continue;
    }

    if (value !== null && (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
      clone[key] = cloneObject(value);
    } else {
      clone[key] = value;
    }
  }

  return clone;
}

function cloneObject(value) {
  if (Array.isArray(value)) {
    return cloneArray(value);
  } else if (value instanceof Model) {
    return cloneModel(value, false, false);
  } else if (Buffer.isBuffer(value)) {
    return new Buffer(value);
  } else {
    return _lodash2.default.cloneDeep(value);
  }
}

function cloneArray(value) {
  var ret = new Array(value.length);

  for (var i = 0, l = ret.length; i < l; ++i) {
    ret[i] = cloneObject(value[i]);
  }

  return ret;
}

function omitObject(model, keyObj) {
  var ModelClass = model.constructor;
  var keys = (0, _keys4.default)(keyObj);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var value = keyObj[key];

    if (value && key.charAt(0) !== '$' && _lodash2.default.has(model, key)) {
      ModelClass.omitImpl(model, key);
    }
  }
}

function omitArray(model, keys) {
  var ModelClass = model.constructor;

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];

    if (key.charAt(0) !== '$' && _lodash2.default.has(model, key)) {
      ModelClass.omitImpl(model, key);
    }
  }
}

function pickObject(model, keyObj) {
  var ModelClass = model.constructor;
  var keys = (0, _keys4.default)(model);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];

    if (key.charAt(0) !== '$' && !keyObj[key]) {
      ModelClass.omitImpl(model, key);
    }
  }
}

function pickArray(model, pick) {
  var ModelClass = model.constructor;
  var keys = (0, _keys4.default)(model);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];

    if (key.charAt(0) !== '$' && !contains(pick, key)) {
      ModelClass.omitImpl(model, key);
    }
  }
}

function contains(arr, value) {
  for (var i = 0, l = arr.length; i < l; ++i) {
    if (arr[i] === value) {
      return true;
    }
  }
  return false;
}

function ensureArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  } else {
    return [obj];
  }
}

function idColumnToIdProperty(ModelClass, idColumn) {
  var idProperty = ModelClass.columnNameToPropertyName(idColumn);

  if (!idProperty) {
    throw new Error(ModelClass.tableName + '.$parseDatabaseJson probably changes the value of the id column `' + idColumn + '` which is a no-no.');
  }

  return idProperty;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1vZGVsLmpzIl0sIm5hbWVzIjpbIkpvaW5FYWdlckFsZ29yaXRobSIsIldoZXJlSW5FYWdlckFsZ29yaXRobSIsIk1vZGVsIiwibmFtZSIsImFwcGVuZCIsIiRpZCIsImlkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic2V0SWQiLCJnZXRJZCIsIiRxdWVyeSIsInRyeCIsIk1vZGVsQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIlF1ZXJ5QnVpbGRlciIsImZvckNsYXNzIiwidHJhbnNhY3RpbmciLCJmaW5kT3BlcmF0aW9uRmFjdG9yeSIsImluc3RhbmNlIiwiaW5zZXJ0T3BlcmF0aW9uRmFjdG9yeSIsInVwZGF0ZU9wZXJhdGlvbkZhY3RvcnkiLCJwYXRjaE9wZXJhdGlvbkZhY3RvcnkiLCJtb2RlbE9wdGlvbnMiLCJwYXRjaCIsImRlbGV0ZU9wZXJhdGlvbkZhY3RvcnkiLCJyZWxhdGVPcGVyYXRpb25GYWN0b3J5IiwiRXJyb3IiLCJ1bnJlbGF0ZU9wZXJhdGlvbkZhY3RvcnkiLCIkcmVsYXRlZFF1ZXJ5IiwicmVsYXRpb25OYW1lIiwicmVsYXRpb24iLCJnZXRSZWxhdGlvbiIsIlJlbGF0ZWRNb2RlbENsYXNzIiwicmVsYXRlZE1vZGVsQ2xhc3MiLCJSZWxhdGVkUXVlcnlCdWlsZGVyIiwiZmluZCIsImJ1aWxkZXIiLCJpbnNlcnQiLCJ1cGRhdGUiLCJkZWxldGUiLCJyZWxhdGUiLCJ1bnJlbGF0ZSIsIiRsb2FkUmVsYXRlZCIsInJlbGF0aW9uRXhwcmVzc2lvbiIsImZpbHRlcnMiLCJsb2FkUmVsYXRlZCIsIiRiZWZvcmVWYWxpZGF0ZSIsImpzb25TY2hlbWEiLCJqc29uIiwib3B0aW9ucyIsIiR2YWxpZGF0ZSIsImNsb25lTW9kZWwiLCJtdXRhYmxlIiwic2tpcFZhbGlkYXRpb24iLCJ2YWxpZGF0b3IiLCJnZXRWYWxpZGF0b3IiLCJhcmdzIiwibW9kZWwiLCJjdHgiLCJiZWZvcmVWYWxpZGF0ZSIsInZhbGlkYXRlIiwiYWZ0ZXJWYWxpZGF0ZSIsIiRhZnRlclZhbGlkYXRlIiwiJHBhcnNlRGF0YWJhc2VKc29uIiwianNvbkF0dHIiLCJnZXRKc29uQXR0cmlidXRlcyIsImkiLCJsIiwiYXR0ciIsInZhbHVlIiwiaXNTdHJpbmciLCJwYXJzZWQiLCJ0cnlQYXJzZUpzb24iLCJ1bmRlZmluZWQiLCIkZm9ybWF0RGF0YWJhc2VKc29uIiwiaXNPYmplY3QiLCIkcGFyc2VKc29uIiwiJGZvcm1hdEpzb24iLCIkc2V0SnNvbiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIiRzZXQiLCJyZWxhdGlvbnMiLCJnZXRSZWxhdGlvbkFycmF5IiwicmVsYXRpb25Kc29uIiwiQXJyYXkiLCJpc0FycmF5IiwiZW5zdXJlTW9kZWxBcnJheSIsImVuc3VyZU1vZGVsIiwiJHNldERhdGFiYXNlSnNvbiIsImtleXMiLCJrZXkiLCJvYmoiLCJjaGFyQXQiLCIkdG9Kc29uIiwic2hhbGxvdyIsIiQkdG9Kc29uIiwiZ2V0UmVsYXRpb25zIiwidG9KU09OIiwiJHRvRGF0YWJhc2VKc29uIiwiZ2V0SnNvblNjaGVtYSIsInBpY2tKc29uU2NoZW1hUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkYmVmb3JlSW5zZXJ0IiwicXVlcnlDb250ZXh0IiwiJGFmdGVySW5zZXJ0IiwiJGJlZm9yZVVwZGF0ZSIsIm9wdCIsIiRhZnRlclVwZGF0ZSIsIiRhZnRlckdldCIsIiRiZWZvcmVEZWxldGUiLCIkYWZ0ZXJEZWxldGUiLCIkdHJhdmVyc2UiLCJmaWx0ZXJDb25zdHJ1Y3RvciIsImNhbGxiYWNrIiwiaXNVbmRlZmluZWQiLCJ0cmF2ZXJzZSIsIiRvbWl0Iiwib21pdEFycmF5Iiwib21pdE9iamVjdCIsIiRwaWNrIiwicGlja0FycmF5IiwicGlja09iamVjdCIsIiR2YWx1ZXMiLCJ2YWx1ZXMiLCIkJHZhbHVlcyIsInJldCIsIiRwcm9wS2V5IiwicHJvcHMiLCIkY2xvbmUiLCIkb21pdEZyb21Kc29uIiwiJG9taXRGcm9tRGF0YWJhc2VKc29uIiwiJGtuZXgiLCJrbmV4IiwiJHRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJjcmVhdGVEYkpzb24iLCJvbWl0IiwicGljayIsInRvSnNvbkltcGwiLCJleHRlbmQiLCJzdWJjbGFzc0NvbnN0cnVjdG9yIiwiaXNFbXB0eSIsImZyb21Kc29uIiwiZnJvbURhdGFiYXNlSnNvbiIsIm9taXRJbXBsIiwicHJvcCIsImNyZWF0ZVZhbGlkYXRvciIsIm9uQ3JlYXRlQWp2IiwiYWp2IiwiYWxsRXJyb3JzIiwidmFsaWRhdGVTY2hlbWEiLCJvd25Qcm9wZXJ0aWVzIiwidjUiLCJjb2x1bW5OYW1lVG9Qcm9wZXJ0eU5hbWUiLCJjb2x1bW5OYW1lIiwiYWRkZWRQcm9wcyIsInJvdyIsInByb3BlcnR5TmFtZSIsImZpcnN0IiwiZGlmZmVyZW5jZSIsInByb3BlcnR5TmFtZVRvQ29sdW1uTmFtZSIsImFkZGVkQ29scyIsImNvbHMiLCJxdWVyeSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiJCRrbmV4IiwicmF3IiwiYXBwbHkiLCJmbiIsImZvcm1hdHRlciIsImNsaWVudCIsImtuZXhRdWVyeSIsInRhYmxlIiwidGFibGVOYW1lIiwidW5pcXVlVGFnIiwiYmluZEtuZXgiLCIkJG9iamVjdGlvbiIsImJvdW5kTW9kZWxzIiwiQm91bmRNb2RlbENsYXNzIiwiYm91bmRSZWxhdGlvbnMiLCJyZWxhdGlvbkFycmF5IiwiYmluZFRyYW5zYWN0aW9uIiwiaW5wdXQiLCJtb2RlbHMiLCJnZXRJZENvbHVtbkFycmF5IiwiaWRDb2x1bW4iLCJnZXRGdWxsSWRDb2x1bW4iLCJtYXAiLCJjb2wiLCJnZXRJZFByb3BlcnR5QXJyYXkiLCJpZENvbHVtblRvSWRQcm9wZXJ0eSIsImdldElkUHJvcGVydHkiLCJyZWR1Y2UiLCJyZXN1bHQiLCJtYXBwaW5nIiwic2V0TWFwcGluZyIsIiRtb2RlbHMiLCJleHByZXNzaW9uIiwicmVzb2x2ZSIsImZpbmRPcHRpb25zIiwiZG9udENhbGxBZnRlckdldCIsImVhZ2VyIiwicnVuQWZ0ZXIiLCJ0cmF2ZXJzZXIiLCJpc0Z1bmN0aW9uIiwibW9kZWxDbGFzcyIsInBhcmVudCIsImpzb25BdHRyaWJ1dGVzIiwiZm9yT3duIiwicHJvcE5hbWUiLCJ0eXBlcyIsImNvbXBhY3QiLCJlbnN1cmVBcnJheSIsInR5cGUiLCJhbnlPZiIsImZsYXR0ZW5EZWVwIiwib25lT2YiLCJpbmNsdWRlcyIsInB1c2giLCJIYXNPbmVSZWxhdGlvbiIsIkhhc01hbnlSZWxhdGlvbiIsIk1hbnlUb01hbnlSZWxhdGlvbiIsIkJlbG9uZ3NUb09uZVJlbGF0aW9uIiwiSGFzT25lVGhyb3VnaFJlbGF0aW9uIiwidWlkUHJvcCIsInVpZFJlZlByb3AiLCJkYlJlZlByb3AiLCJwcm9wUmVmUmVnZXgiLCJ2aXJ0dWFsQXR0cmlidXRlcyIsInJlbGF0aW9uTWFwcGluZ3MiLCJtb2RlbFBhdGhzIiwiZGVmYXVsdEVhZ2VyQWxnb3JpdGhtIiwiZGVmYXVsdEVhZ2VyT3B0aW9ucyIsImlkUHJvcCIsIm1heWJlSnNvblN0ciIsIkpTT04iLCJwYXJzZSIsImVyciIsInRvRGF0YWJhc2VKc29uSW1wbCIsInRvRXh0ZXJuYWxKc29uSW1wbCIsIm9taXRGcm9tSnNvbiIsImFzc2lnbkpzb25WYWx1ZSIsInZBdHRyIiwiYXNzaWduVmlydHVhbEF0dHJpYnV0ZXMiLCJjb250YWlucyIsInRvSnNvbk9iamVjdCIsInRvSnNvbkFycmF5IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJjbG9uZURlZXAiLCJzdHJpcEludGVybmFsIiwiY2xvbmUiLCJvbWl0RnJvbURhdGFiYXNlSnNvbiIsImNsb25lTW9kZWxTaW1wbGUiLCJjbG9uZU1vZGVsV2l0aE9wdCIsImNsb25lT2JqZWN0IiwiY2xvbmVBcnJheSIsImtleU9iaiIsImhhcyIsImFyciIsImlkUHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBRUE7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ZnJvbSAnbG9kYXNoJztcbmltcG9ydCBBanZWYWxpZGF0b3IgZnJvbSAnLi9BanZWYWxpZGF0b3InO1xuaW1wb3J0IFF1ZXJ5QnVpbGRlciBmcm9tICcuLi9xdWVyeUJ1aWxkZXIvUXVlcnlCdWlsZGVyJztcbmltcG9ydCBpbmhlcml0TW9kZWwgZnJvbSAnLi9pbmhlcml0TW9kZWwnO1xuaW1wb3J0IFJlbGF0aW9uRXhwcmVzc2lvbiBmcm9tICcuLi9xdWVyeUJ1aWxkZXIvUmVsYXRpb25FeHByZXNzaW9uJztcbmltcG9ydCB7dmlzaXRNb2RlbHN9IGZyb20gJy4vbW9kZWxWaXNpdG9yJztcblxuaW1wb3J0IHtpbmhlcml0c30gZnJvbSAnLi4vdXRpbHMvY2xhc3NVdGlscyc7XG5pbXBvcnQge2luaGVyaXRIaWRkZW5EYXRhfSBmcm9tICcuLi91dGlscy9oaWRkZW5EYXRhJztcbmltcG9ydCBoaWRkZW5EYXRhIGZyb20gJy4uL3V0aWxzL2RlY29yYXRvcnMvaGlkZGVuRGF0YSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuLi91dGlscy9kZWNvcmF0b3JzL21lbW9pemUnO1xuXG5pbXBvcnQgUmVsYXRpb24gZnJvbSAnLi4vcmVsYXRpb25zL1JlbGF0aW9uJztcbmltcG9ydCBIYXNPbmVSZWxhdGlvbiBmcm9tICcuLi9yZWxhdGlvbnMvaGFzT25lL0hhc09uZVJlbGF0aW9uJztcbmltcG9ydCBIYXNNYW55UmVsYXRpb24gZnJvbSAnLi4vcmVsYXRpb25zL2hhc01hbnkvSGFzTWFueVJlbGF0aW9uJztcbmltcG9ydCBNYW55VG9NYW55UmVsYXRpb24gZnJvbSAnLi4vcmVsYXRpb25zL21hbnlUb01hbnkvTWFueVRvTWFueVJlbGF0aW9uJztcbmltcG9ydCBCZWxvbmdzVG9PbmVSZWxhdGlvbiBmcm9tICcuLi9yZWxhdGlvbnMvYmVsb25nc1RvT25lL0JlbG9uZ3NUb09uZVJlbGF0aW9uJztcbmltcG9ydCBIYXNPbmVUaHJvdWdoUmVsYXRpb24gZnJvbSAnLi4vcmVsYXRpb25zL2hhc09uZVRocm91Z2gvSGFzT25lVGhyb3VnaFJlbGF0aW9uJztcblxuaW1wb3J0IEluc3RhbmNlRmluZE9wZXJhdGlvbiBmcm9tICcuLi9xdWVyeUJ1aWxkZXIvb3BlcmF0aW9ucy9JbnN0YW5jZUZpbmRPcGVyYXRpb24nO1xuaW1wb3J0IEluc3RhbmNlSW5zZXJ0T3BlcmF0aW9uIGZyb20gJy4uL3F1ZXJ5QnVpbGRlci9vcGVyYXRpb25zL0luc3RhbmNlSW5zZXJ0T3BlcmF0aW9uJztcbmltcG9ydCBJbnN0YW5jZVVwZGF0ZU9wZXJhdGlvbiBmcm9tICcuLi9xdWVyeUJ1aWxkZXIvb3BlcmF0aW9ucy9JbnN0YW5jZVVwZGF0ZU9wZXJhdGlvbic7XG5pbXBvcnQgSW5zdGFuY2VEZWxldGVPcGVyYXRpb24gZnJvbSAnLi4vcXVlcnlCdWlsZGVyL29wZXJhdGlvbnMvSW5zdGFuY2VEZWxldGVPcGVyYXRpb24nO1xuXG5pbXBvcnQgSm9pbkVhZ2VyT3BlcmF0aW9uIGZyb20gJy4uL3F1ZXJ5QnVpbGRlci9vcGVyYXRpb25zL2VhZ2VyL0pvaW5FYWdlck9wZXJhdGlvbic7XG5pbXBvcnQgV2hlcmVJbkVhZ2VyT3BlcmF0aW9uIGZyb20gJy4uL3F1ZXJ5QnVpbGRlci9vcGVyYXRpb25zL2VhZ2VyL1doZXJlSW5FYWdlck9wZXJhdGlvbic7XG5cbmNvbnN0IEpvaW5FYWdlckFsZ29yaXRobSA9ICgpID0+IHtcbiAgcmV0dXJuIG5ldyBKb2luRWFnZXJPcGVyYXRpb24oJ2VhZ2VyJyk7XG59O1xuXG5jb25zdCBXaGVyZUluRWFnZXJBbGdvcml0aG0gPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgV2hlcmVJbkVhZ2VyT3BlcmF0aW9uKCdlYWdlcicpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNb2RlbE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtwYXRjaF1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3NraXBWYWxpZGF0aW9uXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbbXV0YWJsZV1cbiAqIEBwcm9wZXJ0eSB7TW9kZWx9IFtvbGRdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWwge1xuXG4gIHN0YXRpYyBRdWVyeUJ1aWxkZXIgPSBRdWVyeUJ1aWxkZXI7XG4gIHN0YXRpYyBSZWxhdGVkUXVlcnlCdWlsZGVyID0gUXVlcnlCdWlsZGVyO1xuXG4gIHN0YXRpYyBIYXNPbmVSZWxhdGlvbiA9IEhhc09uZVJlbGF0aW9uO1xuICBzdGF0aWMgSGFzTWFueVJlbGF0aW9uID0gSGFzTWFueVJlbGF0aW9uO1xuICBzdGF0aWMgTWFueVRvTWFueVJlbGF0aW9uID0gTWFueVRvTWFueVJlbGF0aW9uO1xuICBzdGF0aWMgQmVsb25nc1RvT25lUmVsYXRpb24gPSBCZWxvbmdzVG9PbmVSZWxhdGlvbjtcbiAgc3RhdGljIEhhc09uZVRocm91Z2hSZWxhdGlvbiA9IEhhc09uZVRocm91Z2hSZWxhdGlvbjtcblxuICBzdGF0aWMgSm9pbkVhZ2VyQWxnb3JpdGhtID0gSm9pbkVhZ2VyQWxnb3JpdGhtO1xuICBzdGF0aWMgV2hlcmVJbkVhZ2VyQWxnb3JpdGhtID0gV2hlcmVJbkVhZ2VyQWxnb3JpdGhtO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHRhYmxlTmFtZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMganNvblNjaGVtYSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59XG4gICAqL1xuICBzdGF0aWMgaWRDb2x1bW4gPSAnaWQnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHVpZFByb3AgPSAnI2lkJztcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB1aWRSZWZQcm9wID0gJyNyZWYnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGRiUmVmUHJvcCA9ICcjZGJSZWYnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgc3RhdGljIHByb3BSZWZSZWdleCA9IC8jcmVmeyhbXlxcLl0rKVxcLihbXn1dKyl9L2c7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICovXG4gIHN0YXRpYyBqc29uQXR0cmlidXRlcyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICovXG4gIHN0YXRpYyB2aXJ0dWFsQXR0cmlidXRlcyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgUmVsYXRpb25NYXBwaW5nPn1cbiAgICovXG4gIHN0YXRpYyByZWxhdGlvbk1hcHBpbmdzID0gbnVsbDtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgc3RhdGljIG1vZGVsUGF0aHMgPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgcGlja0pzb25TY2hlbWFQcm9wZXJ0aWVzID0gdHJ1ZTtcblxuICAvKipcbiAgICogQHR5cGUge0NvbnN0cnVjdG9yLjw/IGV4dGVuZHMgRWFnZXJPcGVyYXRpb24+fVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRFYWdlckFsZ29yaXRobSA9IFdoZXJlSW5FYWdlckFsZ29yaXRobTtcblxuICAvKipcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0RWFnZXJPcHRpb25zID0gbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIHsqPX0gaWRcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICAkaWQoaWQpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBzZXRJZCh0aGlzLCBhcmd1bWVudHNbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0SWQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb249fSB0cnhcbiAgICogQHJldHVybnMge1F1ZXJ5QnVpbGRlcn1cbiAgICovXG4gICRxdWVyeSh0cngpIHtcbiAgICBjb25zdCBNb2RlbENsYXNzID0gdGhpcy5jb25zdHJ1Y3RvcjtcblxuICAgIHJldHVybiBNb2RlbENsYXNzLlF1ZXJ5QnVpbGRlclxuICAgICAgLmZvckNsYXNzKE1vZGVsQ2xhc3MpXG4gICAgICAudHJhbnNhY3RpbmcodHJ4KVxuICAgICAgLmZpbmRPcGVyYXRpb25GYWN0b3J5KCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnN0YW5jZUZpbmRPcGVyYXRpb24oJ2ZpbmQnLCB7aW5zdGFuY2U6IHRoaXN9KTtcbiAgICAgIH0pXG4gICAgICAuaW5zZXJ0T3BlcmF0aW9uRmFjdG9yeSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgSW5zdGFuY2VJbnNlcnRPcGVyYXRpb24oJ2luc2VydCcsIHtpbnN0YW5jZTogdGhpc30pO1xuICAgICAgfSlcbiAgICAgIC51cGRhdGVPcGVyYXRpb25GYWN0b3J5KCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnN0YW5jZVVwZGF0ZU9wZXJhdGlvbigndXBkYXRlJywge2luc3RhbmNlOiB0aGlzfSk7XG4gICAgICB9KVxuICAgICAgLnBhdGNoT3BlcmF0aW9uRmFjdG9yeSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgSW5zdGFuY2VVcGRhdGVPcGVyYXRpb24oJ3BhdGNoJywge2luc3RhbmNlOiB0aGlzLCBtb2RlbE9wdGlvbnM6IHtwYXRjaDogdHJ1ZX19KTtcbiAgICAgIH0pXG4gICAgICAuZGVsZXRlT3BlcmF0aW9uRmFjdG9yeSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgSW5zdGFuY2VEZWxldGVPcGVyYXRpb24oJ2RlbGV0ZScsIHtpbnN0YW5jZTogdGhpc30pO1xuICAgICAgfSlcbiAgICAgIC5yZWxhdGVPcGVyYXRpb25GYWN0b3J5KCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgcmVsYXRlYCBtYWtlcyBubyBzZW5zZSBpbiB0aGlzIGNvbnRleHQnKTtcbiAgICAgIH0pXG4gICAgICAudW5yZWxhdGVPcGVyYXRpb25GYWN0b3J5KCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgdW5yZWxhdGVgIG1ha2VzIG5vIHNlbnNlIGluIHRoaXMgY29udGV4dCcpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aW9uTmFtZVxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uPX0gdHJ4XG4gICAqIEByZXR1cm5zIHtRdWVyeUJ1aWxkZXJ9XG4gICAqL1xuICAkcmVsYXRlZFF1ZXJ5KHJlbGF0aW9uTmFtZSwgdHJ4KSB7XG4gICAgY29uc3QgTW9kZWxDbGFzcyA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgY29uc3QgcmVsYXRpb24gPSBNb2RlbENsYXNzLmdldFJlbGF0aW9uKHJlbGF0aW9uTmFtZSk7XG4gICAgY29uc3QgUmVsYXRlZE1vZGVsQ2xhc3MgPSByZWxhdGlvbi5yZWxhdGVkTW9kZWxDbGFzcztcblxuICAgIHJldHVybiBNb2RlbENsYXNzLlJlbGF0ZWRRdWVyeUJ1aWxkZXJcbiAgICAgIC5mb3JDbGFzcyhSZWxhdGVkTW9kZWxDbGFzcylcbiAgICAgIC50cmFuc2FjdGluZyh0cngpXG4gICAgICAuZmluZE9wZXJhdGlvbkZhY3RvcnkoYnVpbGRlciA9PiB7XG4gICAgICAgIHJldHVybiByZWxhdGlvbi5maW5kKGJ1aWxkZXIsIFt0aGlzXSk7XG4gICAgICB9KVxuICAgICAgLmluc2VydE9wZXJhdGlvbkZhY3RvcnkoYnVpbGRlciA9PiB7XG4gICAgICAgIHJldHVybiByZWxhdGlvbi5pbnNlcnQoYnVpbGRlciwgdGhpcyk7XG4gICAgICB9KVxuICAgICAgLnVwZGF0ZU9wZXJhdGlvbkZhY3RvcnkoYnVpbGRlciA9PiB7XG4gICAgICAgIHJldHVybiByZWxhdGlvbi51cGRhdGUoYnVpbGRlciwgdGhpcyk7XG4gICAgICB9KVxuICAgICAgLnBhdGNoT3BlcmF0aW9uRmFjdG9yeShidWlsZGVyID0+IHtcbiAgICAgICAgcmV0dXJuIHJlbGF0aW9uLnBhdGNoKGJ1aWxkZXIsIHRoaXMpO1xuICAgICAgfSlcbiAgICAgIC5kZWxldGVPcGVyYXRpb25GYWN0b3J5KGJ1aWxkZXIgPT4ge1xuICAgICAgICByZXR1cm4gcmVsYXRpb24uZGVsZXRlKGJ1aWxkZXIsIHRoaXMpO1xuICAgICAgfSlcbiAgICAgIC5yZWxhdGVPcGVyYXRpb25GYWN0b3J5KGJ1aWxkZXIgPT4ge1xuICAgICAgICByZXR1cm4gcmVsYXRpb24ucmVsYXRlKGJ1aWxkZXIsIHRoaXMpO1xuICAgICAgfSlcbiAgICAgIC51bnJlbGF0ZU9wZXJhdGlvbkZhY3RvcnkoYnVpbGRlciA9PiB7XG4gICAgICAgIHJldHVybiByZWxhdGlvbi51bnJlbGF0ZShidWlsZGVyLCB0aGlzKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlbGF0aW9uRXhwcmVzc2lvbn0gcmVsYXRpb25FeHByZXNzaW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKFF1ZXJ5QnVpbGRlcik+PX0gZmlsdGVyc1xuICAgKiBAcmV0dXJucyB7UXVlcnlCdWlsZGVyfVxuICAgKi9cbiAgJGxvYWRSZWxhdGVkKHJlbGF0aW9uRXhwcmVzc2lvbiwgZmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmxvYWRSZWxhdGVkKHRoaXMsIHJlbGF0aW9uRXhwcmVzc2lvbiwgZmlsdGVycyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25TY2hlbWFcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAgICogQHBhcmFtIHtNb2RlbE9wdGlvbnM9fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gICRiZWZvcmVWYWxpZGF0ZShqc29uU2NoZW1hLCBqc29uLCBvcHRpb25zKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4ganNvblNjaGVtYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdD19IGpzb25cbiAgICogQHBhcmFtIHtNb2RlbE9wdGlvbnM9fSBvcHRpb25zXG4gICAqIEB0aHJvd3Mge1ZhbGlkYXRpb25FcnJvcn1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgJHZhbGlkYXRlKGpzb24gPSB0aGlzLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAoanNvbiBpbnN0YW5jZW9mIE1vZGVsKSB7XG4gICAgICAvLyBTdHJpcCBhd2F5IHJlbGF0aW9ucyBhbmQgb3RoZXIgaW50ZXJuYWwgc3R1ZmYuXG4gICAgICBqc29uID0gY2xvbmVNb2RlbChqc29uLCB0cnVlLCB0cnVlKTtcbiAgICAgIC8vIFdlIGNhbiBtdXRhdGUgYGpzb25gIG5vdyB0aGF0IHdlIHRvb2sgYSBjb3B5IG9mIGl0LlxuICAgICAgb3B0aW9ucy5tdXRhYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5za2lwVmFsaWRhdGlvbikge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdG9yID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXRWYWxpZGF0b3IoKTtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIG1vZGVsOiB0aGlzLFxuICAgICAganNvbjoganNvbixcbiAgICAgIGN0eDogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIH07XG5cbiAgICB2YWxpZGF0b3IuYmVmb3JlVmFsaWRhdGUoYXJncyk7XG4gICAganNvbiA9IHZhbGlkYXRvci52YWxpZGF0ZShhcmdzKTtcbiAgICB2YWxpZGF0b3IuYWZ0ZXJWYWxpZGF0ZShhcmdzKTtcblxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0ganNvblxuICAgKiBAcGFyYW0ge01vZGVsT3B0aW9ucz19IG9wdGlvbnNcbiAgICovXG4gICRhZnRlclZhbGlkYXRlKGpzb24sIG9wdGlvbnMpIHtcbiAgICAvLyBEbyBub3RoaW5nIGJ5IGRlZmF1bHQuXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgJHBhcnNlRGF0YWJhc2VKc29uKGpzb24pIHtcbiAgICBjb25zdCBqc29uQXR0ciA9IHRoaXMuY29uc3RydWN0b3IuZ2V0SnNvbkF0dHJpYnV0ZXMoKTtcblxuICAgIGlmIChqc29uQXR0ci5sZW5ndGgpIHtcbiAgICAgIC8vIEpTT04gYXR0cmlidXRlcyBtYXkgYmUgcmV0dXJuZWQgYXMgc3RyaW5ncyBkZXBlbmRpbmcgb24gdGhlIGRhdGFiYXNlIGFuZFxuICAgICAgLy8gdGhlIGRhdGFiYXNlIGNsaWVudC4gQ29udmVydCB0aGVtIHRvIG9iamVjdHMgaGVyZS5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ganNvbkF0dHIubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBqc29uQXR0cltpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBqc29uW2F0dHJdO1xuXG4gICAgICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRyeVBhcnNlSnNvbih2YWx1ZSk7XG5cbiAgICAgICAgICAvLyB0cnlQYXJzZUpzb24gcmV0dXJucyB1bmRlZmluZWQgaWYgcGFyc2luZyBmYWlsZWQuXG4gICAgICAgICAgaWYgKHBhcnNlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBqc29uW2F0dHJdID0gcGFyc2VkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gICRmb3JtYXREYXRhYmFzZUpzb24oanNvbikge1xuICAgIGNvbnN0IGpzb25BdHRyID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXRKc29uQXR0cmlidXRlcygpO1xuXG4gICAgaWYgKGpzb25BdHRyLmxlbmd0aCkge1xuICAgICAgLy8gQWxsIGRhdGFiYXNlIGNsaWVudHMgd2FudCBKU09OIGNvbHVtbnMgYXMgc3RyaW5ncy4gRG8gdGhlIGNvbnZlcnNpb24gaGVyZS5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ganNvbkF0dHIubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBqc29uQXR0cltpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBqc29uW2F0dHJdO1xuXG4gICAgICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgIGpzb25bYXR0cl0gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvblxuICAgKiBAcGFyYW0ge01vZGVsT3B0aW9ucz19IG9wdGlvbnNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgJHBhcnNlSnNvbihqc29uLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgJGZvcm1hdEpzb24oanNvbikge1xuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uXG4gICAqIEBwYXJhbSB7TW9kZWxPcHRpb25zPX0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAqIEB0aHJvd3MgVmFsaWRhdGlvbkVycm9yXG4gICAqL1xuICAkc2V0SnNvbihqc29uLCBvcHRpb25zID0ge30pIHtcbiAgICBqc29uID0ganNvbiB8fCB7fTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoanNvbikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgb25seSBwYXNzIG9iamVjdHMgdG8gJHNldEpzb24gbWV0aG9kLiAnXG4gICAgICAgICsgJyRzZXRKc29uIG1ldGhvZCB3YXMgZ2l2ZW4gYW4gaW52YWxpZCB2YWx1ZSAnXG4gICAgICAgICsganNvbik7XG4gICAgfVxuXG4gICAganNvbiA9IHRoaXMuJHBhcnNlSnNvbihqc29uLCBvcHRpb25zKTtcbiAgICBqc29uID0gdGhpcy4kdmFsaWRhdGUoanNvbiwgb3B0aW9ucyk7XG4gICAgdGhpcy4kc2V0KGpzb24pO1xuXG4gICAgY29uc3QgcmVsYXRpb25zID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXRSZWxhdGlvbkFycmF5KCk7XG4gICAgLy8gUGFyc2UgcmVsYXRpb25zIGludG8gTW9kZWwgaW5zdGFuY2VzLlxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcmVsYXRpb25zLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgcmVsYXRpb24gPSByZWxhdGlvbnNbaV07XG4gICAgICBjb25zdCByZWxhdGlvbk5hbWUgPSByZWxhdGlvbi5uYW1lO1xuICAgICAgY29uc3QgcmVsYXRpb25Kc29uID0ganNvbltyZWxhdGlvbk5hbWVdO1xuXG4gICAgICBpZiAocmVsYXRpb25Kc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVsYXRpb25Kc29uKSkge1xuICAgICAgICAgIHRoaXNbcmVsYXRpb25OYW1lXSA9IHJlbGF0aW9uLnJlbGF0ZWRNb2RlbENsYXNzLmVuc3VyZU1vZGVsQXJyYXkocmVsYXRpb25Kc29uLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWxhdGlvbkpzb24pIHtcbiAgICAgICAgICB0aGlzW3JlbGF0aW9uTmFtZV0gPSByZWxhdGlvbi5yZWxhdGVkTW9kZWxDbGFzcy5lbnN1cmVNb2RlbChyZWxhdGlvbkpzb24sIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbcmVsYXRpb25OYW1lXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAgICogQHJldHVybnMge01vZGVsfVxuICAgKi9cbiAgJHNldERhdGFiYXNlSnNvbihqc29uKSB7XG4gICAganNvbiA9IHRoaXMuJHBhcnNlRGF0YWJhc2VKc29uKGpzb24pO1xuXG4gICAgaWYgKGpzb24pIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhqc29uKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB0aGlzW2tleV0gPSBqc29uW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAqL1xuICAkc2V0KG9iaikge1xuICAgIGlmIChvYmopIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNoYWxsb3dcbiAgICovXG4gICR0b0pzb24oc2hhbGxvdykge1xuICAgIGlmIChzaGFsbG93KSB7XG4gICAgICByZXR1cm4gdGhpcy4kJHRvSnNvbihmYWxzZSwgdGhpcy5jb25zdHJ1Y3Rvci5nZXRSZWxhdGlvbnMoKSwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiQkdG9Kc29uKGZhbHNlLCBudWxsLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuJHRvSnNvbihmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICAkdG9EYXRhYmFzZUpzb24oKSB7XG4gICAgY29uc3QganNvblNjaGVtYSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0SnNvblNjaGVtYSgpO1xuXG4gICAgaWYgKGpzb25TY2hlbWEgJiYgdGhpcy5jb25zdHJ1Y3Rvci5waWNrSnNvblNjaGVtYVByb3BlcnRpZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLiQkdG9Kc29uKHRydWUsIG51bGwsIGpzb25TY2hlbWEucHJvcGVydGllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiQkdG9Kc29uKHRydWUsIHRoaXMuY29uc3RydWN0b3IuZ2V0UmVsYXRpb25zKCksIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcXVlcnlDb250ZXh0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfCp9XG4gICAqL1xuICAkYmVmb3JlSW5zZXJ0KHF1ZXJ5Q29udGV4dCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5Q29udGV4dFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXwqfVxuICAgKi9cbiAgJGFmdGVySW5zZXJ0KHF1ZXJ5Q29udGV4dCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtNb2RlbE9wdGlvbnN9IG9wdFxuICAgKiBAcGFyYW0ge1F1ZXJ5QnVpbGRlckNvbnRleHR9IHF1ZXJ5Q29udGV4dFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXwqfVxuICAgKi9cbiAgJGJlZm9yZVVwZGF0ZShvcHQsIHF1ZXJ5Q29udGV4dCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtNb2RlbE9wdGlvbnN9IG9wdFxuICAgKiBAcGFyYW0ge1F1ZXJ5QnVpbGRlckNvbnRleHR9IHF1ZXJ5Q29udGV4dFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXwqfVxuICAgKi9cbiAgJGFmdGVyVXBkYXRlKG9wdCwgcXVlcnlDb250ZXh0KSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1F1ZXJ5QnVpbGRlckNvbnRleHR9IHF1ZXJ5Q29udGV4dFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXwqfVxuICAgKi9cbiAgJGFmdGVyR2V0KHF1ZXJ5Q29udGV4dCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtRdWVyeUJ1aWxkZXJDb250ZXh0fSBxdWVyeUNvbnRleHRcbiAgICogQHJldHVybnMge1Byb21pc2V8Kn1cbiAgICovXG4gICRiZWZvcmVEZWxldGUocXVlcnlDb250ZXh0KSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1F1ZXJ5QnVpbGRlckNvbnRleHR9IHF1ZXJ5Q29udGV4dFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZXwqfVxuICAgKi9cbiAgJGFmdGVyRGVsZXRlKHF1ZXJ5Q29udGV4dCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvci48TW9kZWw+PX0gZmlsdGVyQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtmdW5jdGlvbihNb2RlbCl9IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge01vZGVsfVxuICAgKi9cbiAgJHRyYXZlcnNlKGZpbHRlckNvbnN0cnVjdG9yLCBjYWxsYmFjaykge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKGNhbGxiYWNrKSkge1xuICAgICAgY2FsbGJhY2sgPSBmaWx0ZXJDb25zdHJ1Y3RvcjtcbiAgICAgIGZpbHRlckNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnN0cnVjdG9yLnRyYXZlcnNlKGZpbHRlckNvbnN0cnVjdG9yLCB0aGlzLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz58T2JqZWN0LjxzdHJpbmcsIGJvb2xlYW4+fSBrZXlzXG4gICAqIEByZXR1cm5zIHtNb2RlbH1cbiAgICovXG4gICRvbWl0KCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIF8uaXNPYmplY3QoYXJndW1lbnRzWzBdKSkge1xuICAgICAgY29uc3Qga2V5cyA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5cykpIHtcbiAgICAgICAgb21pdEFycmF5KHRoaXMsIGtleXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb21pdE9iamVjdCh0aGlzLCBrZXlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2V5cyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBrZXlzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgfVxuXG4gICAgICBvbWl0QXJyYXkodGhpcywga2V5cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz58T2JqZWN0LjxzdHJpbmcsIGJvb2xlYW4+fSBrZXlzXG4gICAqIEByZXR1cm5zIHtNb2RlbH0gYHRoaXNgIGZvciBjaGFpbmluZy5cbiAgICovXG4gICRwaWNrKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIF8uaXNPYmplY3QoYXJndW1lbnRzWzBdKSkge1xuICAgICAgY29uc3Qga2V5cyA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5cykpIHtcbiAgICAgICAgcGlja0FycmF5KHRoaXMsIGtleXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGlja09iamVjdCh0aGlzLCBrZXlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2V5cyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBrZXlzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgfVxuXG4gICAgICBwaWNrQXJyYXkodGhpcywga2V5cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gcHJvcHNcbiAgICogQHJldHVybiB7QXJyYXkuPCo+fVxuICAgKi9cbiAgJHZhbHVlcygpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIF8udmFsdWVzKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR2YWx1ZXMoYXJndW1lbnRzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmdzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kJHZhbHVlcyhhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkdmFsdWVzKGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBbdGhpc1thcmdzWzBdXV07XG4gICAgICBjYXNlIDI6IHJldHVybiBbdGhpc1thcmdzWzBdXSwgdGhpc1thcmdzWzFdXV07XG4gICAgICBjYXNlIDM6IHJldHVybiBbdGhpc1thcmdzWzBdXSwgdGhpc1thcmdzWzFdXSwgdGhpc1thcmdzWzJdXV07XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IHJldCA9IG5ldyBBcnJheShhcmdzLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmdzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIHJldFtpXSA9IHRoaXNbYXJnc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBwcm9wc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICAkcHJvcEtleShwcm9wcykge1xuICAgIHN3aXRjaCAocHJvcHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiB0aGlzW3Byb3BzWzBdXSArICcnO1xuICAgICAgY2FzZSAyOiByZXR1cm4gdGhpc1twcm9wc1swXV0gKyAnLCcgKyB0aGlzW3Byb3BzWzFdXTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIHRoaXNbcHJvcHNbMF1dICsgJywnICsgdGhpc1twcm9wc1sxXV0gKyAnLCcgKyB0aGlzW3Byb3BzWzJdXTtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbGV0IGtleSA9ICcnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gcHJvcHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAga2V5ICs9IHRoaXNbcHJvcHNbaV1dICsgKChpIDwgcHJvcHMubGVuZ3RoIC0gMSkgPyAnLCcgOiAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNoYWxsb3dcbiAgICogQHJldHVybiB7TW9kZWx9XG4gICAqL1xuICAkY2xvbmUoc2hhbGxvdykge1xuICAgIHJldHVybiBjbG9uZU1vZGVsKHRoaXMsIHNoYWxsb3csIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+PX0ga2V5c1xuICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XG4gICAqL1xuICBAaGlkZGVuRGF0YSh7bmFtZTogJ29taXRGcm9tSnNvbicsIGFwcGVuZDogdHJ1ZX0pXG4gICRvbWl0RnJvbUpzb24oa2V5cykge31cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPj19IGtleXNcbiAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgQGhpZGRlbkRhdGEoe25hbWU6ICdvbWl0RnJvbURhdGFiYXNlSnNvbicsIGFwcGVuZDogdHJ1ZX0pXG4gICRvbWl0RnJvbURhdGFiYXNlSnNvbihrZXlzKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7a25leH1cbiAgICovXG4gICRrbmV4KCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmtuZXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7a25leH1cbiAgICovXG4gICR0cmFuc2FjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50cmFuc2FjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gICQkdG9Kc29uKGNyZWF0ZURiSnNvbiwgb21pdCwgcGljaykge1xuICAgIGxldCBqc29uID0gdG9Kc29uSW1wbCh0aGlzLCBjcmVhdGVEYkpzb24sIG9taXQsIHBpY2spO1xuXG4gICAgaWYgKGNyZWF0ZURiSnNvbikge1xuICAgICAgcmV0dXJuIHRoaXMuJGZvcm1hdERhdGFiYXNlSnNvbihqc29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuJGZvcm1hdEpzb24oanNvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzdWJjbGFzc0NvbnN0cnVjdG9yXG4gICAqIEByZXR1cm4ge0NvbnN0cnVjdG9yLjxNb2RlbD59XG4gICAqL1xuICBzdGF0aWMgZXh0ZW5kKHN1YmNsYXNzQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoXy5pc0VtcHR5KHN1YmNsYXNzQ29uc3RydWN0b3IubmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWFjaCBNb2RlbCBzdWJjbGFzcyBjb25zdHJ1Y3RvciBtdXN0IGhhdmUgYSBuYW1lJyk7XG4gICAgfVxuXG4gICAgaW5oZXJpdHMoc3ViY2xhc3NDb25zdHJ1Y3RvciwgdGhpcyk7XG4gICAgcmV0dXJuIHN1YmNsYXNzQ29uc3RydWN0b3I7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBqc29uXG4gICAqIEBwYXJhbSB7TW9kZWxPcHRpb25zPX0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAqIEB0aHJvd3MgVmFsaWRhdGlvbkVycm9yXG4gICAqL1xuICBzdGF0aWMgZnJvbUpzb24oanNvbiwgb3B0aW9ucykge1xuICAgIGxldCBtb2RlbCA9IG5ldyB0aGlzKCk7XG4gICAgbW9kZWwuJHNldEpzb24oanNvbiB8fCB7fSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0ganNvblxuICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAqL1xuICBzdGF0aWMgZnJvbURhdGFiYXNlSnNvbihqc29uKSB7XG4gICAgbGV0IG1vZGVsID0gbmV3IHRoaXMoKTtcbiAgICBtb2RlbC4kc2V0RGF0YWJhc2VKc29uKGpzb24gfHwge30pO1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gICAqL1xuICBzdGF0aWMgb21pdEltcGwob2JqLCBwcm9wKSB7XG4gICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtWYWxpZGF0b3J9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlVmFsaWRhdG9yKCkge1xuICAgIHJldHVybiBuZXcgQWp2VmFsaWRhdG9yKHtcbiAgICAgIG9uQ3JlYXRlQWp2OiAoYWp2KSA9PiB7IC8qIERvIE5vdGhpbmcgYnkgZGVmYXVsdCAqLyB9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbGxFcnJvcnM6IHRydWUsXG4gICAgICAgIHZhbGlkYXRlU2NoZW1hOiBmYWxzZSxcbiAgICAgICAgb3duUHJvcGVydGllczogdHJ1ZSxcbiAgICAgICAgdjU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtWYWxpZGF0b3J9XG4gICAqL1xuICBAbWVtb2l6ZVxuICBzdGF0aWMgZ2V0VmFsaWRhdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVZhbGlkYXRvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIEBtZW1vaXplXG4gIHN0YXRpYyBnZXRKc29uU2NoZW1hKCkge1xuICAgIC8vIE1lbW9pemVkIGdldHRlciBpbiBjYXNlIGpzb25TY2hlbWEgaXMgYSBnZXR0ZXIgcHJvcGVydHkgKHVzdWFsbHkgaXMgd2l0aCBFUzYpLlxuICAgIHJldHVybiB0aGlzLmpzb25TY2hlbWE7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbHVtbk5hbWVcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIEBtZW1vaXplXG4gIHN0YXRpYyBjb2x1bW5OYW1lVG9Qcm9wZXJ0eU5hbWUoY29sdW1uTmFtZSkge1xuICAgIGxldCBtb2RlbCA9IG5ldyB0aGlzKCk7XG4gICAgbGV0IGFkZGVkUHJvcHMgPSBfLmtleXMobW9kZWwuJHBhcnNlRGF0YWJhc2VKc29uKHt9KSk7XG5cbiAgICBsZXQgcm93ID0ge307XG4gICAgcm93W2NvbHVtbk5hbWVdID0gbnVsbDtcblxuICAgIGxldCBwcm9wcyA9IF8ua2V5cyhtb2RlbC4kcGFyc2VEYXRhYmFzZUpzb24ocm93KSk7XG4gICAgbGV0IHByb3BlcnR5TmFtZSA9IF8uZmlyc3QoXy5kaWZmZXJlbmNlKHByb3BzLCBhZGRlZFByb3BzKSk7XG5cbiAgICByZXR1cm4gcHJvcGVydHlOYW1lIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgQG1lbW9pemVcbiAgc3RhdGljIHByb3BlcnR5TmFtZVRvQ29sdW1uTmFtZShwcm9wZXJ0eU5hbWUpIHtcbiAgICBsZXQgbW9kZWwgPSBuZXcgdGhpcygpO1xuICAgIGxldCBhZGRlZENvbHMgPSBfLmtleXMobW9kZWwuJGZvcm1hdERhdGFiYXNlSnNvbih7fSkpO1xuXG4gICAgbGV0IG9iaiA9IHt9O1xuICAgIG9ialtwcm9wZXJ0eU5hbWVdID0gbnVsbDtcblxuICAgIGxldCBjb2xzID0gXy5rZXlzKG1vZGVsLiRmb3JtYXREYXRhYmFzZUpzb24ob2JqKSk7XG4gICAgbGV0IGNvbHVtbk5hbWUgPSBfLmZpcnN0KF8uZGlmZmVyZW5jZShjb2xzLCBhZGRlZENvbHMpKTtcblxuICAgIHJldHVybiBjb2x1bW5OYW1lIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbj19IHRyeFxuICAgKiBAcmV0dXJucyB7UXVlcnlCdWlsZGVyfVxuICAgKi9cbiAgc3RhdGljIHF1ZXJ5KHRyeCkge1xuICAgIGNvbnN0IE1vZGVsQ2xhc3MgPSB0aGlzO1xuXG4gICAgcmV0dXJuIE1vZGVsQ2xhc3MuUXVlcnlCdWlsZGVyXG4gICAgICAuZm9yQ2xhc3MoTW9kZWxDbGFzcylcbiAgICAgIC50cmFuc2FjdGluZyh0cngpXG4gICAgICAucmVsYXRlT3BlcmF0aW9uRmFjdG9yeSgoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYHJlbGF0ZWAgbWFrZXMgbm8gc2Vuc2UgaW4gdGhpcyBjb250ZXh0Jyk7XG4gICAgICB9KVxuICAgICAgLnVucmVsYXRlT3BlcmF0aW9uRmFjdG9yeSgoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYHVucmVsYXRlYCBtYWtlcyBubyBzZW5zZSBpbiB0aGlzIGNvbnRleHQnKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7a25leD19IGtuZXhcbiAgICogQHJldHVybnMge2tuZXh9XG4gICAqL1xuICBzdGF0aWMga25leCgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gV2UgY2Fubm90IHNhdmUgdGhpcyB0byBoaWRkZW5EYXRhIGJlY2F1c2UgdmFsdWVzXG4gICAgICAvLyBpbiB0aGVyZSBkb24ndCBnZXQgaW5oZXJpdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAgLy8gYSBjbGFzcyBpcyBpbmhlcml0ZWQuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJyQka25leCcsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogYXJndW1lbnRzWzBdXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy4kJGtuZXg7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtrbmV4fVxuICAgKi9cbiAgc3RhdGljIHRyYW5zYWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmtuZXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtSYXd9XG4gICAqL1xuICBzdGF0aWMgcmF3KCkge1xuICAgIGNvbnN0IGtuZXggPSB0aGlzLmtuZXgoKTtcbiAgICByZXR1cm4ga25leC5yYXcuYXBwbHkoa25leCwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZm4oKSB7XG4gICAgY29uc3Qga25leCA9IHRoaXMua25leCgpO1xuICAgIHJldHVybiBrbmV4LmZuO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Zvcm1hdHRlcn1cbiAgICovXG4gIHN0YXRpYyBmb3JtYXR0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMua25leCgpLmNsaWVudC5mb3JtYXR0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7a25leC5RdWVyeUJ1aWxkZXJ9XG4gICAqL1xuICBzdGF0aWMga25leFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmtuZXgoKS50YWJsZSh0aGlzLnRhYmxlTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB1bmlxdWVUYWcoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFibGVOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7a25leH0ga25leFxuICAgKiBAcmV0dXJucyB7Q29uc3RydWN0b3IuPE1vZGVsPn1cbiAgICovXG4gIHN0YXRpYyBiaW5kS25leChrbmV4KSB7XG4gICAgY29uc3QgTW9kZWxDbGFzcyA9IHRoaXM7XG5cbiAgICBpZiAoIWtuZXguJCRvYmplY3Rpb24pIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShrbmV4LCAnJCRvYmplY3Rpb24nLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgYm91bmRNb2RlbHM6IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBtb2RlbCBjbGFzcyBoYXMgYWxyZWFkeSBiZWVuIGJvdW5kIHRvIHRoZSBnaXZlbiBrbmV4LlxuICAgIGlmIChrbmV4LiQkb2JqZWN0aW9uLmJvdW5kTW9kZWxzW01vZGVsQ2xhc3MudW5pcXVlVGFnKCldKSB7XG4gICAgICByZXR1cm4ga25leC4kJG9iamVjdGlvbi5ib3VuZE1vZGVsc1tNb2RlbENsYXNzLnVuaXF1ZVRhZygpXTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgc3ViY2xhc3Mgb2YgdGhpcyBjbGFzcy5cbiAgICBjb25zdCBCb3VuZE1vZGVsQ2xhc3MgPSBpbmhlcml0TW9kZWwoTW9kZWxDbGFzcyk7XG5cbiAgICAvLyBUaGUgYm91bmQgbW9kZWwgaXMgZXF1YWwgdG8gdGhlIHNvdXJjZSBtb2RlbCBpbiBldmVyeSB3YXkuIFdlIHdhbnQgdG8gY29weVxuICAgIC8vIHRoZSBoaWRkZW4gZGF0YSBhcy1pcyBmcm9tIHRoZSBzb3VyY2Ugc28gdGhhdCB3ZSBkb24ndCBnZXQgdGhlIHBlcmZvcm1hbmNlXG4gICAgLy8gcGVuYWx0eSBvZiBjYWxjdWxhdGluZyBhbGwgbWVtb2l6ZWQgZXRjLiB2YWx1ZXMgYWdhaW4uXG4gICAgaW5oZXJpdEhpZGRlbkRhdGEoTW9kZWxDbGFzcywgQm91bmRNb2RlbENsYXNzKTtcblxuICAgIEJvdW5kTW9kZWxDbGFzcy5rbmV4KGtuZXgpO1xuICAgIGtuZXguJCRvYmplY3Rpb24uYm91bmRNb2RlbHNbTW9kZWxDbGFzcy51bmlxdWVUYWcoKV0gPSBCb3VuZE1vZGVsQ2xhc3M7XG5cbiAgICBjb25zdCBib3VuZFJlbGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3QgcmVsYXRpb25zID0gTW9kZWxDbGFzcy5nZXRSZWxhdGlvbkFycmF5KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHJlbGF0aW9ucy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IHJlbGF0aW9uID0gcmVsYXRpb25zW2ldO1xuICAgICAgYm91bmRSZWxhdGlvbnNbcmVsYXRpb24ubmFtZV0gPSByZWxhdGlvbi5iaW5kS25leChrbmV4KTtcbiAgICB9XG5cbiAgICBCb3VuZE1vZGVsQ2xhc3MucmVsYXRpb25zID0gYm91bmRSZWxhdGlvbnM7XG4gICAgQm91bmRNb2RlbENsYXNzLnJlbGF0aW9uQXJyYXkgPSBfLnZhbHVlcyhib3VuZFJlbGF0aW9ucyk7XG5cbiAgICByZXR1cm4gQm91bmRNb2RlbENsYXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7a25leH0gdHJ4XG4gICAqIEByZXR1cm5zIHtDb25zdHJ1Y3Rvci48TW9kZWw+fVxuICAgKi9cbiAgc3RhdGljIGJpbmRUcmFuc2FjdGlvbih0cngpIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kS25leCh0cngpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW9kZWx8T2JqZWN0fSBtb2RlbFxuICAgKiBAcGFyYW0ge01vZGVsT3B0aW9ucz19IG9wdGlvbnNcbiAgICogQHJldHVybnMge01vZGVsfVxuICAgKi9cbiAgc3RhdGljIGVuc3VyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgY29uc3QgTW9kZWxDbGFzcyA9IHRoaXM7XG5cbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobW9kZWwgaW5zdGFuY2VvZiBNb2RlbENsYXNzKSB7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBNb2RlbENsYXNzLmZyb21Kc29uKG1vZGVsLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48TW9kZWx8T2JqZWN0Pn0gaW5wdXRcbiAgICogQHBhcmFtIHtNb2RlbE9wdGlvbnM9fSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtBcnJheS48TW9kZWw+fVxuICAgKi9cbiAgc3RhdGljIGVuc3VyZU1vZGVsQXJyYXkoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICBsZXQgbW9kZWxzID0gbmV3IEFycmF5KGlucHV0Lmxlbmd0aCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaW5wdXQubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIG1vZGVsc1tpXSA9IHRoaXMuZW5zdXJlTW9kZWwoaW5wdXRbaV0sIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kZWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3RoaXMuZW5zdXJlTW9kZWwoaW5wdXQsIG9wdGlvbnMpXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgQG1lbW9pemVcbiAgc3RhdGljIGdldElkQ29sdW1uQXJyYXkoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5pZENvbHVtbikpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkQ29sdW1uO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3RoaXMuaWRDb2x1bW5dO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfEFycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgQG1lbW9pemVcbiAgc3RhdGljIGdldEZ1bGxJZENvbHVtbigpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmlkQ29sdW1uKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaWRDb2x1bW4ubWFwKGNvbCA9PiB0aGlzLnRhYmxlTmFtZSArICcuJyArIGNvbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnRhYmxlTmFtZSArICcuJyArIHRoaXMuaWRDb2x1bW47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn1cbiAgICovXG4gIEBtZW1vaXplXG4gIHN0YXRpYyBnZXRJZFByb3BlcnR5QXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SWRDb2x1bW5BcnJheSgpLm1hcChjb2wgPT4gaWRDb2x1bW5Ub0lkUHJvcGVydHkodGhpcywgY29sKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ3xBcnJheS48c3RyaW5nPn1cbiAgICovXG4gIEBtZW1vaXplXG4gIHN0YXRpYyBnZXRJZFByb3BlcnR5KCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuaWRDb2x1bW4pKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZENvbHVtbi5tYXAoY29sID0+IGlkQ29sdW1uVG9JZFByb3BlcnR5KHRoaXMsIGNvbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaWRDb2x1bW5Ub0lkUHJvcGVydHkodGhpcywgdGhpcy5pZENvbHVtbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBAaGlkZGVuRGF0YSgpXG4gIHN0YXRpYyBnZXQgcmVsYXRpb25zKCkge31cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIEBoaWRkZW5EYXRhKClcbiAgc3RhdGljIGdldCByZWxhdGlvbkFycmF5KCkge31cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIEBoaWRkZW5EYXRhKClcbiAgc3RhdGljIHNldCByZWxhdGlvbnModmFsdWUpIHt9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBAaGlkZGVuRGF0YSgpXG4gIHN0YXRpYyBzZXQgcmVsYXRpb25BcnJheSh2YWx1ZSkge31cblxuICAvKipcbiAgICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsIFJlbGF0aW9uPn1cbiAgICovXG4gIHN0YXRpYyBnZXRSZWxhdGlvbnMoKSB7XG4gICAgbGV0IHJlbGF0aW9ucyA9IHRoaXMucmVsYXRpb25zO1xuXG4gICAgaWYgKCFyZWxhdGlvbnMpIHtcbiAgICAgIHJlbGF0aW9ucyA9IF8ucmVkdWNlKF8ucmVzdWx0KHRoaXMsICdyZWxhdGlvbk1hcHBpbmdzJyksIChyZWxhdGlvbnMsIG1hcHBpbmcsIHJlbGF0aW9uTmFtZSkgPT4ge1xuICAgICAgICByZWxhdGlvbnNbcmVsYXRpb25OYW1lXSA9IG5ldyBtYXBwaW5nLnJlbGF0aW9uKHJlbGF0aW9uTmFtZSwgdGhpcyk7XG4gICAgICAgIHJlbGF0aW9uc1tyZWxhdGlvbk5hbWVdLnNldE1hcHBpbmcobWFwcGluZyk7XG4gICAgICAgIHJldHVybiByZWxhdGlvbnM7XG4gICAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuICAgICAgdGhpcy5yZWxhdGlvbnMgPSByZWxhdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheS48UmVsYXRpb24+fVxuICAgKi9cbiAgc3RhdGljIGdldFJlbGF0aW9uQXJyYXkoKSB7XG4gICAgbGV0IHJlbGF0aW9uQXJyYXkgPSB0aGlzLnJlbGF0aW9uQXJyYXk7XG5cbiAgICBpZiAoIXJlbGF0aW9uQXJyYXkpIHtcbiAgICAgIHJlbGF0aW9uQXJyYXkgPSBfLnZhbHVlcyh0aGlzLmdldFJlbGF0aW9ucygpKTtcbiAgICAgIHRoaXMucmVsYXRpb25BcnJheSA9IHJlbGF0aW9uQXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF0aW9uQXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7UmVsYXRpb259XG4gICAqL1xuICBzdGF0aWMgZ2V0UmVsYXRpb24obmFtZSkge1xuICAgIGNvbnN0IHJlbGF0aW9uID0gdGhpcy5nZXRSZWxhdGlvbnMoKVtuYW1lXTtcblxuICAgIGlmICghcmVsYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQSBtb2RlbCBjbGFzcyAodGFibGVOYW1lID0gJHt0aGlzLnRhYmxlTmFtZX0pIGRvZXNuJ3QgaGF2ZSByZWxhdGlvbiAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXkuPE1vZGVsfE9iamVjdD59ICRtb2RlbHNcbiAgICogQHBhcmFtIHtzdHJpbmd8UmVsYXRpb25FeHByZXNzaW9ufSBleHByZXNzaW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKFF1ZXJ5QnVpbGRlcik+PX0gZmlsdGVyc1xuICAgKiBAcmV0dXJucyB7UXVlcnlCdWlsZGVyfVxuICAgKi9cbiAgc3RhdGljIGxvYWRSZWxhdGVkKCRtb2RlbHMsIGV4cHJlc3Npb24sIGZpbHRlcnMpIHtcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLnF1ZXJ5KClcbiAgICAgIC5yZXNvbHZlKHRoaXMuZW5zdXJlTW9kZWxBcnJheSgkbW9kZWxzKSlcbiAgICAgIC5maW5kT3B0aW9ucyh7ZG9udENhbGxBZnRlckdldDogdHJ1ZX0pXG4gICAgICAuZWFnZXIoZXhwcmVzc2lvbiwgZmlsdGVycylcbiAgICAgIC5ydW5BZnRlcihmdW5jdGlvbiAobW9kZWxzKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KCRtb2RlbHMpID8gbW9kZWxzIDogbW9kZWxzWzBdO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvci48TW9kZWw+PX0gZmlsdGVyQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtNb2RlbHxBcnJheS48TW9kZWw+fSBtb2RlbHNcbiAgICogQHBhcmFtIHtmdW5jdGlvbihNb2RlbCwgTW9kZWwsIHN0cmluZyl9IHRyYXZlcnNlclxuICAgKiBAcmV0dXJuIHtNb2RlbH1cbiAgICovXG4gIHN0YXRpYyB0cmF2ZXJzZShmaWx0ZXJDb25zdHJ1Y3RvciwgbW9kZWxzLCB0cmF2ZXJzZXIpIHtcbiAgICBmaWx0ZXJDb25zdHJ1Y3RvciA9IGZpbHRlckNvbnN0cnVjdG9yIHx8IG51bGw7XG5cbiAgICBpZiAoXy5pc1VuZGVmaW5lZCh0cmF2ZXJzZXIpKSB7XG4gICAgICB0cmF2ZXJzZXIgPSBtb2RlbHM7XG4gICAgICBtb2RlbHMgPSBmaWx0ZXJDb25zdHJ1Y3RvcjtcbiAgICAgIGZpbHRlckNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIV8uaXNGdW5jdGlvbih0cmF2ZXJzZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RyYXZlcnNlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoXy5pc0VtcHR5KG1vZGVscykpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGVsQ2xhc3MgPSBBcnJheS5pc0FycmF5KG1vZGVscylcbiAgICAgID8gbW9kZWxzWzBdLmNvbnN0cnVjdG9yXG4gICAgICA6IG1vZGVscy5jb25zdHJ1Y3RvcjtcblxuICAgIHZpc2l0TW9kZWxzKG1vZGVscywgbW9kZWxDbGFzcywgKG1vZGVsLCBtb2RlbENsYXNzLCBwYXJlbnQsIHJlbGF0aW9uKSA9PiB7XG4gICAgICBpZiAoIWZpbHRlckNvbnN0cnVjdG9yIHx8IG1vZGVsIGluc3RhbmNlb2YgZmlsdGVyQ29uc3RydWN0b3IpIHtcbiAgICAgICAgdHJhdmVyc2VyKG1vZGVsLCBwYXJlbnQsIHJlbGF0aW9uICYmIHJlbGF0aW9uLm5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XG4gICAqL1xuICBzdGF0aWMgZ2V0SnNvbkF0dHJpYnV0ZXMoKSB7XG4gICAgLy8gSWYgdGhlIGpzb25BdHRyaWJ1dGVzIHByb3BlcnR5IGlzIG5vdCBzZXQsIHRyeSB0byBjcmVhdGUgaXQgYmFzZWRcbiAgICAvLyBvbiB0aGUganNvblNjaGVtYS4gQWxsIHByb3BlcnRpZXMgdGhhdCBhcmUgb2JqZWN0cyBvciBhcnJheXMgbXVzdFxuICAgIC8vIGJlIGNvbnZlcnRlZCB0byBKU09OLlxuICAgIGlmICghdGhpcy5qc29uQXR0cmlidXRlcyAmJiB0aGlzLmdldEpzb25TY2hlbWEoKSkge1xuICAgICAgdGhpcy5qc29uQXR0cmlidXRlcyA9IFtdO1xuXG4gICAgICBfLmZvck93bih0aGlzLmdldEpzb25TY2hlbWEoKS5wcm9wZXJ0aWVzLCAocHJvcCwgcHJvcE5hbWUpID0+IHtcbiAgICAgICAgdmFyIHR5cGVzID0gXy5jb21wYWN0KGVuc3VyZUFycmF5KHByb3AudHlwZSkpO1xuXG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IDAgJiYgQXJyYXkuaXNBcnJheShwcm9wLmFueU9mKSkge1xuICAgICAgICAgIHR5cGVzID0gXy5mbGF0dGVuRGVlcChfLm1hcChwcm9wLmFueU9mLCAndHlwZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IDAgJiYgQXJyYXkuaXNBcnJheShwcm9wLm9uZU9mKSkge1xuICAgICAgICAgIHR5cGVzID0gXy5mbGF0dGVuRGVlcChfLm1hcChwcm9wLm9uZU9mLCAndHlwZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmluY2x1ZGVzKHR5cGVzLCAnb2JqZWN0JykgfHwgXy5pbmNsdWRlcyh0eXBlcywgJ2FycmF5JykpIHtcbiAgICAgICAgICB0aGlzLmpzb25BdHRyaWJ1dGVzLnB1c2gocHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5qc29uQXR0cmlidXRlcykpIHtcbiAgICAgIHRoaXMuanNvbkF0dHJpYnV0ZXMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5qc29uQXR0cmlidXRlcztcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRJZChtb2RlbCwgaWQpIHtcbiAgY29uc3QgaWRQcm9wID0gbW9kZWwuY29uc3RydWN0b3IuZ2V0SWRQcm9wZXJ0eSgpO1xuICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShpZFByb3ApO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBpZiAoaWQubGVuZ3RoICE9PSBpZFByb3AubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhbiBpbnZhbGlkIGlkZW50aWZpZXIgZm9yIGEgbW9kZWwnKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZC5sZW5ndGg7ICsraSkge1xuICAgICAgICBtb2RlbFtpZFByb3BbaV1dID0gaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpZC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFuIGludmFsaWQgaWRlbnRpZmllciBmb3IgYSBtb2RlbCcpO1xuICAgICAgfVxuXG4gICAgICBtb2RlbFtpZFByb3BdID0gaWRbMF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBpZiAoaWRQcm9wLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFuIGludmFsaWQgaWRlbnRpZmllciBmb3IgYSBtb2RlbCcpO1xuICAgICAgfVxuXG4gICAgICBtb2RlbFtpZFByb3BbMF1dID0gaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGVsW2lkUHJvcF0gPSBpZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SWQobW9kZWwpIHtcbiAgY29uc3QgaWRQcm9wID0gbW9kZWwuY29uc3RydWN0b3IuZ2V0SWRQcm9wZXJ0eSgpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGlkUHJvcCkpIHtcbiAgICByZXR1cm4gbW9kZWwuJHZhbHVlcyhpZFByb3ApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtb2RlbFtpZFByb3BdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlSnNvbihtYXliZUpzb25TdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShtYXliZUpzb25TdHIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJZ25vcmUgZXJyb3IuXG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB0b0pzb25JbXBsKG1vZGVsLCBjcmVhdGVEYkpzb24sIG9taXQsIHBpY2spIHtcbiAgaWYgKGNyZWF0ZURiSnNvbikge1xuICAgIHJldHVybiB0b0RhdGFiYXNlSnNvbkltcGwobW9kZWwsIG9taXQsIHBpY2spO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0V4dGVybmFsSnNvbkltcGwobW9kZWwsIG9taXQsIHBpY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvRGF0YWJhc2VKc29uSW1wbChtb2RlbCwgb21pdCwgcGljaykge1xuICBjb25zdCBqc29uID0ge307XG4gIGNvbnN0IG9taXRGcm9tSnNvbiA9IG1vZGVsLiRvbWl0RnJvbURhdGFiYXNlSnNvbigpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGFzc2lnbkpzb25WYWx1ZShqc29uLCBrZXksIG1vZGVsW2tleV0sIG9taXQsIHBpY2ssIG9taXRGcm9tSnNvbiwgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4ganNvbjtcbn1cblxuZnVuY3Rpb24gdG9FeHRlcm5hbEpzb25JbXBsKG1vZGVsLCBvbWl0LCBwaWNrKSB7XG4gIGNvbnN0IGpzb24gPSB7fTtcbiAgY29uc3Qgb21pdEZyb21Kc29uID0gbW9kZWwuJG9taXRGcm9tSnNvbigpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuICBjb25zdCB2QXR0ciA9IG1vZGVsLmNvbnN0cnVjdG9yLnZpcnR1YWxBdHRyaWJ1dGVzO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbHVlID0gbW9kZWxba2V5XTtcblxuICAgIGFzc2lnbkpzb25WYWx1ZShqc29uLCBrZXksIHZhbHVlLCBvbWl0LCBwaWNrLCBvbWl0RnJvbUpzb24sIGZhbHNlKTtcbiAgfVxuXG4gIGlmICh2QXR0cikge1xuICAgIGFzc2lnblZpcnR1YWxBdHRyaWJ1dGVzKGpzb24sIG1vZGVsLCB2QXR0ciwgb21pdCwgcGljaywgb21pdEZyb21Kc29uKTtcbiAgfVxuXG4gIHJldHVybiBqc29uO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25WaXJ0dWFsQXR0cmlidXRlcyhqc29uLCBtb2RlbCwgdkF0dHIsIG9taXQsIHBpY2ssIG9taXRGcm9tSnNvbikge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHZBdHRyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGNvbnN0IGtleSA9IHZBdHRyW2ldO1xuICAgIGxldCB2YWx1ZSA9IG1vZGVsW2tleV07XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwobW9kZWwpO1xuICAgIH1cblxuICAgIGFzc2lnbkpzb25WYWx1ZShqc29uLCBrZXksIHZhbHVlLCBvbWl0LCBwaWNrLCBvbWl0RnJvbUpzb24sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25Kc29uVmFsdWUoanNvbiwga2V5LCB2YWx1ZSwgb21pdCwgcGljaywgb21pdEZyb21Kc29uLCBjcmVhdGVEYkpzb24pIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICBpZiAoa2V5LmNoYXJBdCgwKSAhPT0gJyQnXG4gICAgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGUgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgKCFvbWl0IHx8ICFvbWl0W2tleV0pXG4gICAgJiYgKCFwaWNrIHx8IHBpY2tba2V5XSlcbiAgICAmJiAoIW9taXRGcm9tSnNvbiB8fCAhY29udGFpbnMob21pdEZyb21Kc29uLCBrZXkpKSkge1xuXG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBqc29uW2tleV0gPSB0b0pzb25PYmplY3QodmFsdWUsIGNyZWF0ZURiSnNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGpzb25ba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b0pzb25PYmplY3QodmFsdWUsIGNyZWF0ZURiSnNvbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdG9Kc29uQXJyYXkodmFsdWUsIGNyZWF0ZURiSnNvbik7XG4gIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBNb2RlbCkge1xuICAgIGlmIChjcmVhdGVEYkpzb24pIHtcbiAgICAgIHJldHVybiB2YWx1ZS4kdG9EYXRhYmFzZUpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlLiR0b0pzb24oKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXy5jbG9uZURlZXAodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvSnNvbkFycmF5KHZhbHVlLCBjcmVhdGVEYkpzb24pIHtcbiAgY29uc3QgcmV0ID0gbmV3IEFycmF5KHZhbHVlLmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSByZXQubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgcmV0W2ldID0gdG9Kc29uT2JqZWN0KHZhbHVlW2ldLCBjcmVhdGVEYkpzb24pXG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjbG9uZU1vZGVsKG1vZGVsLCBzaGFsbG93LCBzdHJpcEludGVybmFsKSB7XG4gIGxldCBjbG9uZSA9IG51bGw7XG5cbiAgY29uc3Qgb21pdEZyb21Kc29uID0gbW9kZWwuJG9taXRGcm9tSnNvbigpO1xuICBjb25zdCBvbWl0RnJvbURhdGFiYXNlSnNvbiA9IG1vZGVsLiRvbWl0RnJvbURhdGFiYXNlSnNvbigpO1xuXG4gIGlmICghc2hhbGxvdyAmJiAhc3RyaXBJbnRlcm5hbCkge1xuICAgIGNsb25lID0gY2xvbmVNb2RlbFNpbXBsZShtb2RlbCk7XG4gIH0gZWxzZSB7XG4gICAgY2xvbmUgPSBjbG9uZU1vZGVsV2l0aE9wdChtb2RlbCwgc2hhbGxvdywgc3RyaXBJbnRlcm5hbCk7XG4gIH1cblxuICBpZiAob21pdEZyb21Kc29uKSB7XG4gICAgY2xvbmUuJG9taXRGcm9tSnNvbihvbWl0RnJvbUpzb24pO1xuICB9XG5cbiAgaWYgKG9taXRGcm9tRGF0YWJhc2VKc29uKSB7XG4gICAgY2xvbmUuJG9taXRGcm9tRGF0YWJhc2VKc29uKG9taXRGcm9tRGF0YWJhc2VKc29uKTtcbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVNb2RlbFNpbXBsZShtb2RlbCkge1xuICBjb25zdCBjbG9uZSA9IG5ldyBtb2RlbC5jb25zdHJ1Y3RvcigpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbHVlID0gbW9kZWxba2V5XTtcblxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBjbG9uZVtrZXldID0gY2xvbmVPYmplY3QodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbG9uZVtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiBjbG9uZU1vZGVsV2l0aE9wdChtb2RlbCwgc2hhbGxvdywgc3RyaXBJbnRlcm5hbCkge1xuICBjb25zdCBjbG9uZSA9IG5ldyBtb2RlbC5jb25zdHJ1Y3RvcigpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuICBjb25zdCByZWxhdGlvbnMgPSBtb2RlbC5jb25zdHJ1Y3Rvci5nZXRSZWxhdGlvbnMoKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWx1ZSA9IG1vZGVsW2tleV07XG5cbiAgICBpZiAoc2hhbGxvdyAmJiByZWxhdGlvbnNba2V5XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cmlwSW50ZXJuYWwgJiYga2V5LmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgY2xvbmVba2V5XSA9IGNsb25lT2JqZWN0KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvbmVba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVPYmplY3QodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGNsb25lQXJyYXkodmFsdWUpO1xuICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTW9kZWwpIHtcbiAgICByZXR1cm4gY2xvbmVNb2RlbCh2YWx1ZSwgZmFsc2UsIGZhbHNlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfLmNsb25lRGVlcCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBcnJheSh2YWx1ZSkge1xuICBjb25zdCByZXQgPSBuZXcgQXJyYXkodmFsdWUubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHJldC5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICByZXRbaV0gPSBjbG9uZU9iamVjdCh2YWx1ZVtpXSlcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9taXRPYmplY3QobW9kZWwsIGtleU9iaikge1xuICBjb25zdCBNb2RlbENsYXNzID0gbW9kZWwuY29uc3RydWN0b3I7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhrZXlPYmopO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbHVlID0ga2V5T2JqW2tleV07XG5cbiAgICBpZiAodmFsdWUgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIF8uaGFzKG1vZGVsLCBrZXkpKSB7XG4gICAgICBNb2RlbENsYXNzLm9taXRJbXBsKG1vZGVsLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvbWl0QXJyYXkobW9kZWwsIGtleXMpIHtcbiAgY29uc3QgTW9kZWxDbGFzcyA9IG1vZGVsLmNvbnN0cnVjdG9yO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJyAmJiBfLmhhcyhtb2RlbCwga2V5KSkge1xuICAgICAgTW9kZWxDbGFzcy5vbWl0SW1wbChtb2RlbCwga2V5KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGlja09iamVjdChtb2RlbCwga2V5T2JqKSB7XG4gIGNvbnN0IE1vZGVsQ2xhc3MgPSBtb2RlbC5jb25zdHJ1Y3RvcjtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG1vZGVsKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcblxuICAgIGlmIChrZXkuY2hhckF0KDApICE9PSAnJCcgJiYgIWtleU9ialtrZXldKSB7XG4gICAgICBNb2RlbENsYXNzLm9taXRJbXBsKG1vZGVsLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwaWNrQXJyYXkobW9kZWwsIHBpY2spIHtcbiAgY29uc3QgTW9kZWxDbGFzcyA9IG1vZGVsLmNvbnN0cnVjdG9yO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJyAmJiAhY29udGFpbnMocGljaywga2V5KSkge1xuICAgICAgTW9kZWxDbGFzcy5vbWl0SW1wbChtb2RlbCwga2V5KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udGFpbnMoYXJyLCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQXJyYXkob2JqKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpZENvbHVtblRvSWRQcm9wZXJ0eShNb2RlbENsYXNzLCBpZENvbHVtbikge1xuICBsZXQgaWRQcm9wZXJ0eSA9IE1vZGVsQ2xhc3MuY29sdW1uTmFtZVRvUHJvcGVydHlOYW1lKGlkQ29sdW1uKTtcblxuICBpZiAoIWlkUHJvcGVydHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoTW9kZWxDbGFzcy50YWJsZU5hbWUgKyAnLiRwYXJzZURhdGFiYXNlSnNvbiBwcm9iYWJseSBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGUgaWQgY29sdW1uIGAnICsgaWRDb2x1bW4gKyAnYCB3aGljaCBpcyBhIG5vLW5vLicpO1xuICB9XG5cbiAgcmV0dXJuIGlkUHJvcGVydHk7XG59Il19