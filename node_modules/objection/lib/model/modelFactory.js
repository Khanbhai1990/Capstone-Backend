'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.fromJson = fromJson;
exports.toDatabaseJson = toDatabaseJson;

var _knexUtils = require('../utils/knexUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var QueryBuilderBase = null;
var ReferenceBuilder = null;

function fromJson(_ref) {
  var modelClass = _ref.modelClass,
      json = _ref.json,
      deep = _ref.deep,
      modelOptions = _ref.modelOptions;

  lazyLoadDeps();

  if (deep) {
    return fromJsonDeep(json, modelClass, modelOptions);
  } else {
    return fromJsonShallow(json, modelClass, modelOptions);
  }
}

function toDatabaseJson(_ref2) {
  var model = _ref2.model,
      queryProps = _ref2.queryProps;

  var json = model.$toDatabaseJson();
  var modelClass = model.constructor;

  if (queryProps) {
    var query = queryProps.get(model);

    if (query) {
      var keys = (0, _keys2.default)(query);

      for (var i = 0, l = keys.length; i < l; ++i) {
        var key = keys[i];
        var queryProp = query[key];

        if (queryProp instanceof QueryBuilderBase) {
          queryProp = queryProp.build();
        }

        json[modelClass.propertyNameToColumnName(key)] = queryProp;
      }
    }
  }

  return json;
}

function fromJsonDeep(obj, modelClass, modelOptions) {
  var queryProps = new _map2.default();

  var ctx = {
    modelOptions: modelOptions,
    queryProps: queryProps
  };

  var model = splitDeep(obj, modelClass, ctx);

  return {
    model: model,
    queryProps: queryProps
  };
}

function fromJsonShallow(obj, modelClass, modelOptions) {
  var queryProps = new _map2.default();

  var model = void 0;

  if (Array.isArray(obj)) {
    model = obj.map(function (obj) {
      return doSplit(obj, modelClass, queryProps, modelOptions);
    });
  } else {
    model = doSplit(obj, modelClass, queryProps, modelOptions);
  }

  return {
    model: model,
    queryProps: queryProps
  };
}

function splitDeep(objs, modelClass, ctx) {
  if (Array.isArray(objs)) {
    return splitDeepMany(objs, modelClass, ctx);
  } else if (objs) {
    return splitDeepOne(objs, modelClass, ctx);
  }
}

function splitDeepMany(objs, modelClass, ctx) {
  var models = new Array(objs.length);

  for (var i = 0, l = objs.length; i < l; ++i) {
    models[i] = splitDeepOne(objs[i], modelClass, ctx);
  }

  return models;
}

function splitDeepOne(obj, modelClass, ctx) {
  var relations = modelClass.getRelationArray();
  var model = doSplit(obj, modelClass, ctx.queryProps, ctx.modelOptions);

  for (var i = 0, l = relations.length; i < l; ++i) {
    var relation = relations[i];
    var relatedObjs = obj[relation.name];
    var relatedModelClass = relation.relatedModelClass;

    if (relatedObjs) {
      model[relation.name] = splitDeep(relatedObjs, relatedModelClass, ctx);
    } else if (relatedObjs !== undefined) {
      model[relation.name] = relatedObjs;
    }
  }

  return model;
}

function doSplit(obj, modelClass, queryProps, modelOpt) {
  var query = {};
  var model = {};

  var keys = (0, _keys2.default)(obj);
  var relations = modelClass.getRelations();
  var hasQueries = false;

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];
    var value = obj[key];

    if (relations[key]) {
      continue;
    }

    if (isQueryProp(value)) {
      hasQueries = true;
      query[key] = value;
    } else {
      model[key] = value;
    }
  }

  model = modelClass.fromJson(model, modelOpt);

  if (hasQueries) {
    queryProps.set(model, query);
  }

  return model;
}

function isQueryProp(value) {
  return (0, _knexUtils.isKnexQueryBuilder)(value) || (0, _knexUtils.isKnexRaw)(value) || value instanceof QueryBuilderBase || value instanceof ReferenceBuilder;
}

function lazyLoadDeps() {
  QueryBuilderBase = QueryBuilderBase || requireQueryBuilderBase();
  ReferenceBuilder = ReferenceBuilder || requireReferenceBuilder();
}

function requireQueryBuilderBase() {
  return require('../queryBuilder/QueryBuilderBase').default;
}

function requireReferenceBuilder() {
  return require('../queryBuilder/ReferenceBuilder').default;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,