'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ajv = require('ajv');

var _ajv2 = _interopRequireDefault(_ajv);

var _Model = require('./Model');

var _Model2 = _interopRequireDefault(_Model);

var _Validator2 = require('./Validator');

var _Validator3 = _interopRequireDefault(_Validator2);

var _ValidationError = require('./ValidationError');

var _ValidationError2 = _interopRequireDefault(_ValidationError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AjvValidator = function (_Validator) {
  (0, _inherits3.default)(AjvValidator, _Validator);

  function AjvValidator(conf) {
    (0, _classCallCheck3.default)(this, AjvValidator);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Validator.call(this));

    _this.ajv = new _ajv2.default(_lodash2.default.defaults({}, conf.options, {
      useDefaults: true
    }));

    _this.ajvNoDefaults = new _ajv2.default(_lodash2.default.assign({}, conf.options, {
      useDefaults: false
    }));

    _this.cache = (0, _create2.default)(null);

    conf.onCreateAjv(_this.ajv);
    conf.onCreateAjv(_this.ajvNoDefaults);
    return _this;
  }

  AjvValidator.prototype.beforeValidate = function beforeValidate(_ref) {
    var model = _ref.model,
        json = _ref.json,
        options = _ref.options,
        ctx = _ref.ctx;

    ctx.jsonSchema = model.constructor.getJsonSchema();

    if (model.$beforeValidate !== _Model2.default.prototype.$beforeValidate) {
      ctx.jsonSchema = _lodash2.default.cloneDeep(ctx.jsonSchema);
      ctx.jsonSchema = model.$beforeValidate(ctx.jsonSchema, json, options);
    }
  };

  AjvValidator.prototype.validate = function validate(_ref2) {
    var model = _ref2.model,
        json = _ref2.json,
        options = _ref2.options,
        ctx = _ref2.ctx;

    if (!ctx.jsonSchema) {
      return json;
    }

    var validator = this.getJsonSchemaValidator(model.constructor, ctx.jsonSchema, !!options.patch);

    if (!options.mutable && !options.patch && this.setsDefaultValues(ctx.jsonSchema)) {
      json = _lodash2.default.cloneDeep(json);
    }

    validator(json);

    if (validator.errors) {
      throw parseValidationError(validator.errors);
    }

    return json;
  };

  AjvValidator.prototype.getJsonSchemaValidator = function getJsonSchemaValidator(ModelClass, jsonSchema, skipRequired) {
    var key = jsonSchema === ModelClass.getJsonSchema() ? 'default' : (0, _stringify2.default)(jsonSchema);

    var validators = this.cache[key];

    if (!validators) {
      validators = {};
      this.cache[key] = validators;
    }

    var validator = validators[skipRequired];

    if (!validator) {
      validator = this.compileJsonSchemaValidator(jsonSchema, skipRequired);
      validators[skipRequired] = validator;
    }

    return validator;
  };

  AjvValidator.prototype.compileJsonSchemaValidator = function compileJsonSchemaValidator(jsonSchema, skipRequired) {
    var origRequired = void 0;

    try {
      if (skipRequired) {
        origRequired = jsonSchema.required;
        jsonSchema.required = [];
        return this.ajvNoDefaults.compile(jsonSchema);
      } else {
        return this.ajv.compile(jsonSchema);
      }
    } finally {
      if (skipRequired) {
        jsonSchema.required = origRequired;
      }
    }
  };

  AjvValidator.prototype.setsDefaultValues = function setsDefaultValues(jsonSchema) {
    return jsonSchema && jsonSchema.properties && hasDefaults(jsonSchema.properties);
  };

  return AjvValidator;
}(_Validator3.default);

exports.default = AjvValidator;


function parseValidationError(errors) {
  var errorHash = {};
  var index = 0;

  for (var i = 0; i < errors.length; ++i) {
    var error = errors[i];
    var key = error.dataPath.substring(1);

    if (!key) {
      var match = /should have required property '(.+)'/.exec(error.message);
      if (match && match.length > 1) {
        key = match[1];
      }
    }

    if (!key && error.params && error.params.additionalProperty) {
      key = error.params.additionalProperty;
    }

    if (!key) {
      key = (index++).toString();
    }

    errorHash[key] = [{
      message: error.message,
      keyword: error.keyword,
      params: error.params
    }];
  }

  return new _ValidationError2.default(errorHash);
}

function hasDefaults(obj) {
  if (Array.isArray(obj)) {
    return arrayHasDefaults(obj);
  } else {
    return objectHasDefaults(obj);
  }
}

function arrayHasDefaults(arr) {
  for (var i = 0, l = arr.length; i < l; ++i) {
    var val = arr[i];

    if (val && (typeof val === 'undefined' ? 'undefined' : (0, _typeof3.default)(val)) === 'object' && hasDefaults(val)) {
      return true;
    }
  }

  return false;
}

function objectHasDefaults(obj) {
  var keys = (0, _keys2.default)(obj);

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];

    if (key === 'default') {
      return true;
    } else {
      var val = obj[key];

      if (val && (typeof val === 'undefined' ? 'undefined' : (0, _typeof3.default)(val)) === 'object' && hasDefaults(val)) {
        return true;
      }
    }
  }

  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,