'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transaction;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _Model = require('./model/Model');

var _Model2 = _interopRequireDefault(_Model);

var _classUtils = require('./utils/classUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @returns {Promise}
 */
function transaction() {
  // There must be at least one model class and the callback.
  if (arguments.length < 2) {
    return _bluebird2.default.reject(new Error('objection.transaction: provide at least one Model class to bind to the transaction or a knex instance'));
  }

  var args = new Array(arguments.length);

  for (var i = 0, l = args.length; i < l; ++i) {
    args[i] = arguments[i];
  }

  if (!(0, _classUtils.isSubclassOf)(args[0], _Model2.default) && _lodash2.default.isFunction(args[0].transaction)) {
    var knex = _lodash2.default.first(args);
    args = args.slice(1);

    // If the function is a generator, wrap it using Promise.coroutine.
    if (isGenerator(args[0])) {
      args[0] = _bluebird2.default.coroutine(args[0]);
    }

    return knex.transaction.apply(knex, args);
  } else {
    // The last argument should be the callback and all other Model subclasses.
    var callback = _lodash2.default.last(args);
    var modelClasses = _lodash2.default.take(args, args.length - 1);
    var _i = void 0;

    for (_i = 0; _i < modelClasses.length; ++_i) {
      if (!(0, _classUtils.isSubclassOf)(modelClasses[_i], _Model2.default)) {
        return _bluebird2.default.reject(new Error('objection.transaction: all but the last argument should be Model subclasses'));
      }
    }

    var _knex = _lodash2.default.first(modelClasses).knex();
    for (_i = 0; _i < modelClasses.length; ++_i) {
      if (modelClasses[_i].knex() !== _knex) {
        return _bluebird2.default.reject(new Error('objection.transaction: all Model subclasses must be bound to the same database'));
      }
    }

    // If the function is a generator, wrap it using Promise.coroutine.
    if (isGenerator(callback)) {
      callback = _bluebird2.default.coroutine(callback);
    }

    return _knex.transaction(function (trx) {
      var args = new Array(modelClasses.length + 1);

      for (var _i2 = 0; _i2 < modelClasses.length; ++_i2) {
        args[_i2] = modelClasses[_i2].bindTransaction(trx);
      }

      args[args.length - 1] = trx;

      return _bluebird2.default.try(function () {
        return callback.apply(trx, args);
      });
    });
  }
}

/**
 * @param {Constructor.<Model>|knex} modelClassOrKnex
 * @returns {Promise}
 */
transaction.start = function (modelClassOrKnex) {
  var knex = modelClassOrKnex;

  if ((0, _classUtils.isSubclassOf)(modelClassOrKnex, _Model2.default)) {
    knex = modelClassOrKnex.knex();
  }

  if (!knex || !_lodash2.default.isFunction(knex.transaction)) {
    return _bluebird2.default.reject(new Error('objection.transaction.start: first argument must be a model class or a knex instance'));
  }

  return new _bluebird2.default(function (resolve, reject) {
    knex.transaction(function (trx) {
      resolve(trx);
    }).catch(function (err) {
      reject(err);
    });
  });
};

function isGenerator(fn) {
  return fn && fn.constructor && fn.constructor.name === 'GeneratorFunction';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLmpzIl0sIm5hbWVzIjpbInRyYW5zYWN0aW9uIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVqZWN0IiwiRXJyb3IiLCJhcmdzIiwiQXJyYXkiLCJpIiwibCIsImlzRnVuY3Rpb24iLCJrbmV4IiwiZmlyc3QiLCJzbGljZSIsImlzR2VuZXJhdG9yIiwiY29yb3V0aW5lIiwiYXBwbHkiLCJjYWxsYmFjayIsImxhc3QiLCJtb2RlbENsYXNzZXMiLCJ0YWtlIiwiYmluZFRyYW5zYWN0aW9uIiwidHJ4IiwidHJ5Iiwic3RhcnQiLCJtb2RlbENsYXNzT3JLbmV4IiwicmVzb2x2ZSIsImNhdGNoIiwiZXJyIiwiZm4iLCJjb25zdHJ1Y3RvciIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVF3QkEsVzs7QUFSeEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsV0FBVCxHQUF1QjtBQUNwQztBQUNBLE1BQUlDLFVBQVVDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsV0FBTyxtQkFBUUMsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSx1R0FBVixDQUFmLENBQVA7QUFDRDs7QUFFRCxNQUFJQyxPQUFPLElBQUlDLEtBQUosQ0FBVUwsVUFBVUMsTUFBcEIsQ0FBWDs7QUFFQSxPQUFLLElBQUlLLElBQUksQ0FBUixFQUFXQyxJQUFJSCxLQUFLSCxNQUF6QixFQUFpQ0ssSUFBSUMsQ0FBckMsRUFBd0MsRUFBRUQsQ0FBMUMsRUFBNkM7QUFDM0NGLFNBQUtFLENBQUwsSUFBVU4sVUFBVU0sQ0FBVixDQUFWO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDLDhCQUFhRixLQUFLLENBQUwsQ0FBYixrQkFBRCxJQUFpQyxpQkFBRUksVUFBRixDQUFhSixLQUFLLENBQUwsRUFBUUwsV0FBckIsQ0FBckMsRUFBd0U7QUFDdEUsUUFBSVUsT0FBTyxpQkFBRUMsS0FBRixDQUFRTixJQUFSLENBQVg7QUFDQUEsV0FBT0EsS0FBS08s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LEVBQXJCLEVBQXlCO0FBQ3ZCLFNBQU9BLE1BQU1BLEdBQUdDLFdBQVQsSUFBd0JELEdBQUdDLFdBQUgsQ0FBZUMsSUFBZixLQUF3QixtQkFBdkQ7QUFDRCIsImZpbGUiOiJ0cmFuc2FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgTW9kZWwgZnJvbSAnLi9tb2RlbC9Nb2RlbCc7XG5pbXBvcnQge2lzU3ViY2xhc3NPZn0gZnJvbSAnLi91dGlscy9jbGFzc1V0aWxzJztcblxuLyoqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNhY3Rpb24oKSB7XG4gIC8vIFRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIG1vZGVsIGNsYXNzIGFuZCB0aGUgY2FsbGJhY2suXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ29iamVjdGlvbi50cmFuc2FjdGlvbjogcHJvdmlkZSBhdCBsZWFzdCBvbmUgTW9kZWwgY2xhc3MgdG8gYmluZCB0byB0aGUgdHJhbnNhY3Rpb24gb3IgYSBrbmV4IGluc3RhbmNlJykpO1xuICB9XG5cbiAgbGV0IGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmdzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gIH1cblxuICBpZiAoIWlzU3ViY2xhc3NPZihhcmdzWzBdLCBNb2RlbCkgJiYgXy5pc0Z1bmN0aW9uKGFyZ3NbMF0udHJhbnNhY3Rpb24pKSB7XG4gICAgbGV0IGtuZXggPSBfLmZpcnN0KGFyZ3MpO1xuICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuXG4gICAgLy8gSWYgdGhlIGZ1bmN0aW9uIGlzIGEgZ2VuZXJhdG9yLCB3cmFwIGl0IHVzaW5nIFByb21pc2UuY29yb3V0aW5lLlxuICAgIGlmIChpc0dlbmVyYXRvcihhcmdzWzBdKSkge1xuICAgICAgYXJnc1swXSA9IFByb21pc2UuY29yb3V0aW5lKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBrbmV4LnRyYW5zYWN0aW9uLmFwcGx5KGtuZXgsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBsYXN0IGFyZ3VtZW50IHNob3VsZCBiZSB0aGUgY2FsbGJhY2sgYW5kIGFsbCBvdGhlciBNb2RlbCBzdWJjbGFzc2VzLlxuICAgIGxldCBjYWxsYmFjayA9IF8ubGFzdChhcmdzKTtcbiAgICBsZXQgbW9kZWxDbGFzc2VzID0gXy50YWtlKGFyZ3MsIGFyZ3MubGVuZ3RoIC0gMSk7XG4gICAgbGV0IGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kZWxDbGFzc2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoIWlzU3ViY2xhc3NPZihtb2RlbENsYXNzZXNbaV0sIE1vZGVsKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdvYmplY3Rpb24udHJhbnNhY3Rpb246IGFsbCBidXQgdGhlIGxhc3QgYXJndW1lbnQgc2hvdWxkIGJlIE1vZGVsIHN1YmNsYXNzZXMnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGtuZXggPSBfLmZpcnN0KG1vZGVsQ2xhc3Nlcykua25leCgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtb2RlbENsYXNzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChtb2RlbENsYXNzZXNbaV0ua25leCgpICE9PSBrbmV4KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ29iamVjdGlvbi50cmFuc2FjdGlvbjogYWxsIE1vZGVsIHN1YmNsYXNzZXMgbXVzdCBiZSBib3VuZCB0byB0aGUgc2FtZSBkYXRhYmFzZScpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgZnVuY3Rpb24gaXMgYSBnZW5lcmF0b3IsIHdyYXAgaXQgdXNpbmcgUHJvbWlzZS5jb3JvdXRpbmUuXG4gICAgaWYgKGlzR2VuZXJhdG9yKGNhbGxiYWNrKSkge1xuICAgICAgY2FsbGJhY2sgPSBQcm9taXNlLmNvcm91dGluZShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtuZXgudHJhbnNhY3Rpb24odHJ4ID0+IHtcbiAgICAgIGxldCBhcmdzID0gbmV3IEFycmF5KG1vZGVsQ2xhc3Nlcy5sZW5ndGggKyAxKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENsYXNzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJnc1tpXSA9IG1vZGVsQ2xhc3Nlc1tpXS5iaW5kVHJhbnNhY3Rpb24odHJ4KTtcbiAgICAgIH1cblxuICAgICAgYXJnc1thcmdzLmxlbmd0aCAtIDFdID0gdHJ4O1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS50cnkoKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodHJ4LCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb25zdHJ1Y3Rvci48TW9kZWw+fGtuZXh9IG1vZGVsQ2xhc3NPcktuZXhcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG50cmFuc2FjdGlvbi5zdGFydCA9IGZ1bmN0aW9uIChtb2RlbENsYXNzT3JLbmV4KSB7XG4gIGxldCBrbmV4ID0gbW9kZWxDbGFzc09yS25leDtcblxuICBpZiAoaXNTdWJjbGFzc09mKG1vZGVsQ2xhc3NPcktuZXgsIE1vZGVsKSkge1xuICAgIGtuZXggPSBtb2RlbENsYXNzT3JLbmV4LmtuZXgoKTtcbiAgfVxuXG4gIGlmICgha25leCB8fCAhXy5pc0Z1bmN0aW9uKGtuZXgudHJhbnNhY3Rpb24pKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignb2JqZWN0aW9uLnRyYW5zYWN0aW9uLnN0YXJ0OiBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgbW9kZWwgY2xhc3Mgb3IgYSBrbmV4IGluc3RhbmNlJykpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBrbmV4LnRyYW5zYWN0aW9uKHRyeCA9PiB7XG4gICAgICByZXNvbHZlKHRyeCk7XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmbiAmJiBmbi5jb25zdHJ1Y3RvciAmJiBmbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnR2VuZXJhdG9yRnVuY3Rpb24nO1xufVxuIl19