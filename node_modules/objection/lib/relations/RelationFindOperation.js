'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _FindOperation2 = require('../queryBuilder/operations/FindOperation');

var _FindOperation3 = _interopRequireDefault(_FindOperation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RelationFindOperation = function (_FindOperation) {
  (0, _inherits3.default)(RelationFindOperation, _FindOperation);

  function RelationFindOperation(name, opt) {
    (0, _classCallCheck3.default)(this, RelationFindOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _FindOperation.call(this, name, opt));

    _this.relation = opt.relation;
    _this.owners = opt.owners;
    _this.alwaysReturnArray = false;
    _this.omitProps = [];
    return _this;
  }

  RelationFindOperation.prototype.clone = function clone() {
    var _FindOperation$protot;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var copy = (_FindOperation$protot = _FindOperation.prototype.clone).call.apply(_FindOperation$protot, [this].concat(args));

    copy.relation = this.relation;
    copy.owners = this.owners;
    copy.alwaysReturnArray = this.alwaysReturnArray;
    copy.omitProps = this.omitProps;

    return copy;
  };

  RelationFindOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var ids = new Array(this.owners.length);

    for (var i = 0, l = this.owners.length; i < l; ++i) {
      ids[i] = this.owners[i].$values(this.relation.ownerProp);
    }

    this.relation.findQuery(builder, {
      ownerIds: _lodash2.default.uniqBy(ids, join)
    });

    this.selectMissingJoinColumns(builder);
  };

  RelationFindOperation.prototype.onAfter = function onAfter(builder, related) {
    this.omitImplicitJoinProps(related);
    return _FindOperation.prototype.onAfter.call(this, builder, related);
  };

  RelationFindOperation.prototype.onAfterInternal = function onAfterInternal(builder, related) {
    var owners = this.owners;
    var isOneToOne = this.relation.isOneToOne();
    var relatedByOwnerId = (0, _create2.default)(null);

    for (var i = 0, l = related.length; i < l; ++i) {
      var rel = related[i];
      var key = rel.$propKey(this.relation.relatedProp);
      var arr = relatedByOwnerId[key];

      if (!arr) {
        arr = [];
        relatedByOwnerId[key] = arr;
      }

      arr.push(rel);
    }

    for (var _i = 0, _l = owners.length; _i < _l; ++_i) {
      var own = owners[_i];
      var _key2 = own.$propKey(this.relation.ownerProp);
      var _related = relatedByOwnerId[_key2];

      if (isOneToOne) {
        own[this.relation.name] = _related && _related[0] || null;
      } else {
        own[this.relation.name] = _related || [];
      }
    }

    if (!this.alwaysReturnArray && this.relation.isOneToOne() && related.length <= 1) {
      return related[0] || undefined;
    } else {
      return related;
    }
  };

  RelationFindOperation.prototype.selectMissingJoinColumns = function selectMissingJoinColumns(builder) {
    var addedSelects = {};
    var cols = this.relation.fullRelatedCol();

    for (var c = 0, lc = cols.length; c < lc; ++c) {
      var col = cols[c];

      if (!builder.hasSelection(col) && !addedSelects[col]) {
        this.omitProps.push(this.relation.relatedProp[c]);
        addedSelects[col] = true;
      }
    }

    var selects = (0, _keys2.default)(addedSelects);

    if (selects.length) {
      builder.select(selects);
    }
  };

  RelationFindOperation.prototype.omitImplicitJoinProps = function omitImplicitJoinProps(related) {
    var relatedModelClass = this.relation.relatedModelClass;

    if (!this.omitProps.length || !related) {
      return related;
    }

    if (!Array.isArray(related)) {
      return this.omitImplicitJoinPropsFromOne(relatedModelClass, related);
    }

    if (!related.length) {
      return related;
    }

    for (var i = 0, l = related.length; i < l; ++i) {
      this.omitImplicitJoinPropsFromOne(relatedModelClass, related[i]);
    }

    return related;
  };

  RelationFindOperation.prototype.omitImplicitJoinPropsFromOne = function omitImplicitJoinPropsFromOne(relatedModelClass, model) {
    for (var c = 0, lc = this.omitProps.length; c < lc; ++c) {
      relatedModelClass.omitImpl(model, this.omitProps[c]);
    }

    return model;
  };

  return RelationFindOperation;
}(_FindOperation3.default);

exports.default = RelationFindOperation;


function join(arr) {
  return arr.join();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,