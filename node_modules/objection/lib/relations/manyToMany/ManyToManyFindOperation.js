'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _RelationFindOperation = require('../RelationFindOperation');

var _RelationFindOperation2 = _interopRequireDefault(_RelationFindOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ownerJoinColumnAliasPrefix = 'objectiontmpjoin';

var ManyToManyFindOperation = function (_RelationFindOperatio) {
  (0, _inherits3.default)(ManyToManyFindOperation, _RelationFindOperatio);

  function ManyToManyFindOperation(name, opt) {
    (0, _classCallCheck3.default)(this, ManyToManyFindOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _RelationFindOperatio.call(this, name, opt));

    _this.ownerJoinColumnAlias = new Array(_this.relation.joinTableOwnerCol.length);

    for (var i = 0, l = _this.relation.joinTableOwnerCol.length; i < l; ++i) {
      _this.ownerJoinColumnAlias[i] = ownerJoinColumnAliasPrefix + i;
    }
    return _this;
  }

  ManyToManyFindOperation.prototype.clone = function clone() {
    var _RelationFindOperatio2;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var copy = (_RelationFindOperatio2 = _RelationFindOperatio.prototype.clone).call.apply(_RelationFindOperatio2, [this].concat(args));

    copy.ownerJoinColumnAlias = this.ownerJoinColumnAlias;

    return copy;
  };

  ManyToManyFindOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var relatedModelClass = this.relation.relatedModelClass;
    var ids = new Array(this.owners.length);

    for (var i = 0, l = this.owners.length; i < l; ++i) {
      ids[i] = this.owners[i].$values(this.relation.ownerProp);
    }

    if (!builder.has(builder.constructor.SelectSelector)) {
      // If the user hasn't specified a select clause, select the related model's columns.
      // If we don't do this we also get the join table's columns.
      builder.select(relatedModelClass.tableName + '.*');

      // Also select all extra columns.
      for (var _i = 0, _l = this.relation.joinTableExtras.length; _i < _l; ++_i) {
        var extra = this.relation.joinTableExtras[_i];
        var joinTable = this.relation.joinTable;

        builder.select(joinTable + '.' + extra.joinTableCol + ' as ' + extra.aliasCol);
      }
    }

    this.relation.findQuery(builder, {
      ownerIds: _lodash2.default.uniqBy(ids, join)
    });

    var fullJoinTableOwnerCol = this.relation.fullJoinTableOwnerCol();
    // We must select the owner join columns so that we know for which owner model the related
    // models belong to after the requests.
    for (var _i2 = 0, _l2 = fullJoinTableOwnerCol.length; _i2 < _l2; ++_i2) {
      builder.select(fullJoinTableOwnerCol[_i2] + ' as ' + this.ownerJoinColumnAlias[_i2]);

      // Mark them to be omitted later.
      this.omitProps.push(relatedModelClass.columnNameToPropertyName(this.ownerJoinColumnAlias[_i2]));
    }

    this.selectMissingJoinColumns(builder);
  };

  ManyToManyFindOperation.prototype.onAfterInternal = function onAfterInternal(builder, related) {
    var isOneToOne = this.relation.isOneToOne();
    var relatedByOwnerId = (0, _create2.default)(null);

    for (var i = 0, l = related.length; i < l; ++i) {
      var rel = related[i];
      var key = rel.$propKey(this.ownerJoinColumnAlias);
      var arr = relatedByOwnerId[key];

      if (!arr) {
        arr = [];
        relatedByOwnerId[key] = arr;
      }

      arr.push(rel);
    }

    for (var _i3 = 0, _l3 = this.owners.length; _i3 < _l3; ++_i3) {
      var own = this.owners[_i3];
      var _key2 = own.$propKey(this.relation.ownerProp);
      var _related = relatedByOwnerId[_key2];

      if (isOneToOne) {
        own[this.relation.name] = _related && _related[0] || null;
      } else {
        own[this.relation.name] = _related || [];
      }
    }

    if (this.alwaysReturnArray) {
      return related;
    } else {
      return isOneToOne ? related[0] || undefined : related;
    }
  };

  return ManyToManyFindOperation;
}(_RelationFindOperation2.default);

exports.default = ManyToManyFindOperation;


function join(arr) {
  return arr.join();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,